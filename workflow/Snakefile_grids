"""
All workflow (anything to do with input/output files, creating figures etc. that only has to do with grids.
"""

# add molgri directory
import sys
sys.path.append(".")

from molgri.paths import PATH_OUTPUT_AUTOSAVE

pepfile: "workflow/grid_pep.yaml"
grids = pep.sample_table

rule all_grids:
    input:
        expand(f"{PATH_OUTPUT_AUTOSAVE}{{grid_identifier}}_full_array.npy", grid_identifier=grids.index)

rule run_grid:
    """
    This rule should provide a full grid and its geometric parameters.
    """
    output:
        full_array = f"{PATH_OUTPUT_AUTOSAVE}{{grid_identifier}}_full_array.npy",
        adjacency_array = f"{PATH_OUTPUT_AUTOSAVE}{{grid_identifier}}_adjacency_array.npz",
        distances_array = f"{PATH_OUTPUT_AUTOSAVE}{{grid_identifier}}_distances_array.npz",
        borders_array= f"{PATH_OUTPUT_AUTOSAVE}{{grid_identifier}}_borders_array.npz",
        volumes = f"{PATH_OUTPUT_AUTOSAVE}{{grid_identifier}}_volumes.npy",
    params:
        b = lambda wc: grids.loc[wc.grid_identifier,"b_grid_name"],
        o = lambda wc: grids.loc[wc.grid_identifier,"o_grid_name"],
        t = lambda wc: grids.loc[wc.grid_identifier,"t_grid_name"]
    run:
        from molgri.space.fullgrid import FullGrid
        from molgri.io import GridWriter
        fg = FullGrid(params.b, params.o, params.t)
        gw = GridWriter(fg)
        gw.save_full_grid(output.full_array)
        gw.save_geometry_full_grid(path_adjacency_array=output.adjacency_array, path_borders_array=output.borders_array,
            path_distances_array=output.distances_array, path_volumes=output.volumes)