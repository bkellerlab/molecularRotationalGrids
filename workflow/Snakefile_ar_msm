"""
All of the workflows relating to production of trajectories, subsequent MSMs and their related outputs (figures ...)
"""
from time import time
from typing import Any, Tuple, Sequence

import numpy as np

# add molgri directory
import sys
sys.path.append(".")

from molgri.paths import PATH_OUTPUT_AUTOSAVE, PATH_INPUT_BASEGRO, PATH_EXPERIMENTS
from workflow.snakemake_utils import find_config_parameter_value, log_the_run, modify_mdrun, modify_topology, \
    read_from_mdrun
from molgri.constants import TAUS


include: "Snakefile_grids"

#wildcard_constraints:
#    unique_id=".*msm.*"

I_TO_ASSIGN = np.arange(20, dtype=int)

rule all:
    input:
       #f"{PATH_EXPERIMENTS}FAKE2_argon2_cc1_1/80_80_very_short/10/transition_matrix.npz"
       # expand(f"{PATH_EXPERIMENTS}{{unique_id}}/trajectory.xtc",
       #     unique_id=["FAKE4_argon2_cc1_1", "FAKE4_argon2_cc1_10"],
       #     grid_identifier=["80_80_very_short"],
       #     i=np.arange(20, dtype=int)
       # ),
        expand(f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{tau}}/its.csv", unique_id=["FAKE7_1_1", "FAKE7_1_10"],
           grid_identifier=["80_80_very_short"],sigma="None",which="LR",
           tau=[10],suffix=[".png", "_vmdlog_msm"],is_corrected=["msm"]),
        msm_all1 = expand(f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/its_{{is_corrected}}_{{sigma}}_{{which}}.png",
           unique_id=["FAKE7_1_1", "FAKE7_1_10"], tau=TAUS,
           grid_identifier=["80_80_very_short"], sigma=None, which="LR", is_corrected = ["msm"]),
        msm_all2 = expand(f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{tau}}/eigenvector_{{i}}_{{sigma}}_{{which}}_{{is_corrected}}.png",i=[0, 1, 2, 3, 4],
           unique_id=["FAKE7_1_1", "FAKE7_1_10"],
           grid_identifier=["80_80_very_short"], sigma=None, which="LR",
           tau=[10], suffix=[".png", "_vmdlog_msm"], is_corrected = ["msm"]),
        msm_all3=expand(f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{tau}}/eigenvectors_{{is_corrected}}_{{sigma}}_{{which}}.png",
           unique_id=["FAKE7_1_1", "FAKE7_1_10"],
           grid_identifier=["80_80_very_short"],sigma="None",which="LR",
           tau=[10],suffix=[".png", "_vmdlog_msm"],is_corrected=["msm"])


rule create_config_file_in_argon:
    """
    The point here is to get the unique ID of the experiment, read all of its parameters from a database of experiments 
    and write them to a file within this experiment folder.
    """
    input:
        experiments_database = "workflow/experiments_in_ar.csv"
    output:
        config_file = f"{PATH_EXPERIMENTS}{{unique_id}}/experiment_config.txt"
    run:
        # read in all parameters
        import pandas as pd
        experiments = pd.read_csv(input.experiments_database, index_col=0)
        columns = experiments.columns
        with open(output.config_file, "w") as f:
            print(experiments, wildcards.unique_id)
            for i, parameter_value in enumerate(experiments.loc[wildcards.unique_id]):
                f.write(f"{columns[i]}={parameter_value}\n")


rule prepare_water_water_in_argon:
    """
    Start with an end structure of a shorter run to have a good starting structure.
    """
    # wildcard_constraints:
    #     unique_id=".*argon.*"
    input:
        start_structures_all = f"{PATH_INPUT_BASEGRO}nvt_fake_ar.gro",
        water_gro= f"{PATH_INPUT_BASEGRO}H2O.gro",
        forcefield1 = f"{PATH_INPUT_BASEGRO}argon_forcefield.itp",
        forcefield2 = f"{PATH_INPUT_BASEGRO}ffnonbonded.itp",
        forcefield3 = f"{PATH_INPUT_BASEGRO}ffbonded.itp",
        water_in_arg_top = f"{PATH_INPUT_BASEGRO}topol_fake_ar.top",
        water_top= f"{PATH_INPUT_BASEGRO}H2O_H2Op.top",
        base_mdp_file = f"{PATH_INPUT_BASEGRO}mdrun.mdp",
        select_group=f"{PATH_INPUT_BASEGRO}select_group_zero",
        select_centers=f"{PATH_INPUT_BASEGRO}select_3_and_0",
        index_m1=f"{PATH_INPUT_BASEGRO}index_first_mol.ndx",
        select_two=f"{PATH_INPUT_BASEGRO}select_2",
        config_file = f"{PATH_EXPERIMENTS}{{unique_id}}/experiment_config.txt"
    output:
        molecule2 = f"{PATH_EXPERIMENTS}{{unique_id}}/m2.gro",
        select_two= f"{PATH_EXPERIMENTS}{{unique_id}}/select_two",
        start_structures = f"{PATH_EXPERIMENTS}{{unique_id}}/inserted_structure.gro",
        forcefield1=f"{PATH_EXPERIMENTS}{{unique_id}}/argon_forcefield.itp",
        forcefield2=f"{PATH_EXPERIMENTS}{{unique_id}}/ffnonbonded.itp",
        forcefield3=f"{PATH_EXPERIMENTS}{{unique_id}}/ffbonded.itp",
        runfile = f"{PATH_EXPERIMENTS}{{unique_id}}/mdrun.mdp",
        topology = f"{PATH_EXPERIMENTS}{{unique_id}}/topology.top",
        water_top= f"{PATH_EXPERIMENTS}{{unique_id}}/H2O_H2Op.top",
        select_group = f"{PATH_EXPERIMENTS}{{unique_id}}/select_group",
        select_centers = f"{PATH_EXPERIMENTS}{{unique_id}}/select_centers",
        index_m1 = f"{PATH_EXPERIMENTS}{{unique_id}}/index_m1.ndx",
    run:
        # todo: create gro strapped of ar atoms
        import shutil
        # stuff that can be copied without being modified
        shutil.copy(input.start_structures_all,output.start_structures)
        shutil.copy(input.select_group, output.select_group)
        shutil.copy(input.select_centers,output.select_centers)
        shutil.copy(input.index_m1, output.index_m1)
        shutil.copy(input.forcefield1,output.forcefield1)
        shutil.copy(input.forcefield2,output.forcefield2)
        shutil.copy(input.forcefield3,output.forcefield3)
        shutil.copy(input.water_gro,output.molecule2)
        shutil.copy(input.select_two,output.select_two)

        # depending on config parameters, topology and runfile will be adapted
        shutil.copy(input.water_in_arg_top, output.topology)
        shutil.copy(input.water_top,output.water_top)
        shutil.copy(input.base_mdp_file, output.runfile)

        # modify runfile with given parameters
        trajectory_len = find_config_parameter_value(input.config_file,"traj_len")
        integrator = find_config_parameter_value(input.config_file,"integrator")
        coupling = find_config_parameter_value(input.config_file,"coupling_constant_ps")
        step = find_config_parameter_value(input.config_file, "step_in_ps")
        dielectric_constant = find_config_parameter_value(input.config_file,"epsilon-r")
        modify_mdrun(output.runfile, "integrator", integrator)
        modify_mdrun(output.runfile,"nsteps",trajectory_len)
        modify_mdrun(output.runfile, "compressed-x-grps", "SOLp")
        modify_mdrun(output.runfile,"nstxout-compressed","5")
        modify_mdrun(output.runfile,"coulombtype","PME")
        modify_mdrun(output.runfile,"dt",step)
        modify_mdrun(output.runfile,"pcoupl","no")
        modify_mdrun(output.runfile, "nstxout", "0")
        modify_mdrun(output.runfile,"nstenergy","0")
        modify_mdrun(output.runfile,"epsilon-r",dielectric_constant)

        # two reference groups
        modify_mdrun(output.runfile, "tc-grps", "System")
        modify_mdrun(output.runfile,"ref_t", "300")
        modify_mdrun(output.runfile,"tau_t", f"{coupling}")
        modify_mdrun(output.runfile,"verlet-buffer-tolerance","1e-03")

        # modify topology with given parameters
        up1_nm = find_config_parameter_value(input.config_file,"up1_nm")
        up2_nm = find_config_parameter_value(input.config_file,"up2_nm")
        force = find_config_parameter_value(input.config_file,"force")
        modify_topology(output.topology,i="1",j="4",funct=10,low=0.0,up1=up1_nm,up2=up2_nm,force_constant=force)

rule run_msm_gromacs_in_ar:
    """
    This rule gets structure, trajectory, topology and gromacs run file as input, as output we are only interested in 
    energies.
    """
    # wildcard_constraints:
    #     unique_id=".*argon.*"
    input:
        structure=f"{PATH_EXPERIMENTS}{{unique_id}}/inserted_structure.gro",
        runfile = f"{PATH_EXPERIMENTS}{{unique_id}}/mdrun.mdp",
        topology = f"{PATH_EXPERIMENTS}{{unique_id}}/topology.top",
        select_group = f"{PATH_EXPERIMENTS}{{unique_id}}/select_group",
        select_two= f"{PATH_EXPERIMENTS}{{unique_id}}/select_two",
        index_m1 = f"{PATH_EXPERIMENTS}{{unique_id}}/index_m1.ndx",
        select_centers= f"{PATH_EXPERIMENTS}{{unique_id}}/select_centers",
    log:
         log = "experiments/{unique_id}/logging_gromacs.log"
    benchmark:
        f"{PATH_EXPERIMENTS}{{unique_id}}/gromacs_benchmark.txt"
    shadow: "shallow"
    output:
        only_water_structure = f"{PATH_EXPERIMENTS}{{unique_id}}/structure.gro",
        temp = f"{PATH_EXPERIMENTS}{{unique_id}}/temp.xtc",
        result=f"{PATH_EXPERIMENTS}{{unique_id}}/result.tpr",
        temp2= f"{PATH_EXPERIMENTS}{{unique_id}}/temp2.xtc",
        trajectory= f"{PATH_EXPERIMENTS}{{unique_id}}/trajectory.xtc",
    shell:
        """
        #!/bin/bash
        export PATH="/home/janjoswig/local/gromacs-2022/bin:$PATH"
        gmx22 trjconv -f {input.structure} -s {input.structure} -o {output.only_water_structure} < {input.select_two}
        gmx22 grompp -f {input.runfile} -o {output.result} -c {input.structure} -p {input.topology}
        gmx22 mdrun -s {output.result} -x {output.temp} -e ener.edr -g {log.log}  -nt 1
        gmx22 trjconv -f {output.temp} -s {output.result}  -pbc mol -center -o {output.temp2} -n {input.index_m1} < {input.select_centers}
        gmx22 trjconv -fit rot+trans -f {output.temp2} -o {output.trajectory} -s {input.structure} -n {input.index_m1} < {input.select_centers}
        """


rule run_trajectory_assignment:
    """
    A step before MSM - assign every frame of the trajectory to the corresponding cell

    As input we need the trajectory, structure and full array of the grid we wanna assign to.

    As output we get a cell index for every frame of the trajectory.
    """

    input:
        full_array = f"{PATH_OUTPUT_AUTOSAVE}{{grid_identifier}}_full_array.npy",
        trajectory = f"{PATH_EXPERIMENTS}{{unique_id}}/trajectory.xtc",
        structure = f"{PATH_EXPERIMENTS}{{unique_id}}/structure.gro",
        molecule2 = f"{PATH_EXPERIMENTS}{{unique_id}}/m2.gro",
        runfile= f"{PATH_EXPERIMENTS}{{unique_id}}/mdrun.mdp",
    threads: 1
    benchmark:
        f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/assignment_benchmark.txt"
    output:
        partial_assignments=f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/assignments.npy",
    run:
        from molgri.molecules.transitions import AssignmentTool

        # using all inputs
        my_grid = np.load(input.full_array)

        # frequency = int(read_from_mdrun(input.runfile,"nstxout-compressed"))
        # n_steps = int(read_from_mdrun(input.runfile,"nsteps"))
        # num_frames = n_steps//frequency
        # breakdown = np.linspace(0, num_frames, 20, dtype=int)
        # start = breakdown[int(wildcards.i)]
        # stop = breakdown[int(wildcards.i)+1]

        at = AssignmentTool(my_grid,input.structure,input.trajectory, input.molecule2, stop=8000000) #, n_jobs=1

        # saving output
        np.save(output.partial_assignments,at.get_full_assignments())

# rule combine_trajectory_assignment:
#     """
#     A step before MSM - assign every frame of the trajectory to the corresponding cell
#
#     As input we need the trajectory, structure and full array of the grid we wanna assign to.
#
#     As output we get a cell index for every frame of the trajectory.
#     """
#     input:
#         part_assignments = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/assignments.npy"
#     output:
#         assignments=f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/assignments.npy",
#     benchmark:
#         f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/combine_assignment_benchmark.txt"
#     run:
#         all_assignments = []
#         for one_assignment_file in input.part_assignments:
#             all_assignments.append(np.load(one_assignment_file))
#         # saving output
#         all_assignments = np.concatenate(all_assignments)
#         print(all_assignments.shape)
#         np.save(output.assignments, all_assignments)


# rule crop_out_outside_R:
#     input:
#         #rmsds_mol1 = f"{PATH_EXPERIMENTS}{{unique_id}}/rmsd_mol1.xvg",
#         rmsds_mol2 = f"{PATH_EXPERIMENTS}{{unique_id}}/rmsd_mol2.xvg"
#     output:
#         indices_cropped=f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/indices_cropped.npy",
#     run:
#         from molgri.molecules.parsers import XVGParser
#         import pandas as pd
# 
#         #radii_1 = XVGParser(input.rmsds_mol1).all_values[:, 1].T
#         radii_2 = XVGParser(input.rmsds_mol2).all_values[:, 1].T
#         radii = 10 * radii_2
# 
#         indices_cropped = np.where(radii < 4.1, 1, 0)
#         print("radii")
#         print(pd.DataFrame(radii).describe())
#         print(pd.DataFrame(indices_cropped).describe())
#         np.save(output.indices_cropped, indices_cropped)
# # rule run_deeptime_transition_matrix:
# #     """
# #     A step before MSM - assign every frame of the trajectory to the corresponding cell
# #
# #     As input we need the trajectory, structure and full array of the grid we wanna assign to.
# #
# #     As output we get a cell index for every frame of the trajectory.
# #     """
# #
# #     input:
# #         trajectory = "experiments/{unique_id}/trajectory.trr",
# #         structure = "experiments/{unique_id}/structure.gro",
# #     wildcard_constraints:
# #         grid_identifier = "deeptime.*"
# #     log:
# #         log = "experiments/{unique_id}/{grid_identifier}/logging_assignments.log"
# #     output:
# #         assignments="experiments/{unique_id}/{grid_identifier}/assignments.npy",
# #     run:
# #         t1 = time()
# #         import MDAnalysis as mda
# #         from deeptime.clustering import KMeans
# #
# #         estimator = KMeans(
# #             n_clusters=40,# place 100 cluster centers
# #             init_strategy='uniform',# uniform initialization strategy
# #             max_iter=5000,# don't actually perform the optimization, just place centers
# #             fixed_seed=13,
# #             n_jobs=8,
# #         )
# #
# #         trajectory_universe = mda.Universe(input.structure,input.trajectory)
# #         all_positions = []
# #         for ts in trajectory_universe.trajectory:
# #             all_positions.extend(ts.positions[3:].flatten())
# #         clustering = estimator.fit(np.array(all_positions)).fetch_model()
# #         my_assignments = clustering.transform(np.array(all_positions))
# #         np.save(output.assignments,my_assignments)
# #         t2 = time()
# #         log_the_run(wildcards.unique_id, input, output, log.log, None, t2-t1)

# rule combine_trajectory:
#     input:
#         part_traj= expand(f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/assignments_{{i}}.npy", i=I_TO_ASSIGN, allow_missing=True)
#     output:
#         assignments=f"{PATH_EXPERIMENTS}{{unique_id}}/trajectory_combined.xtc",
#     shell:
#         """
#         #!/bin/bash
#         export PATH="/home/janjoswig/local/gromacs-2022/bin:$PATH"
#         echo gmx22 trjcat -f {input.part_traj} -o {output.assignments} -cat
#         gmx22 trjcat -f {input.part_traj} -o {output.assignments} -cat
#         """

rule run_msm_matrix:
    """
    As input we need: assignments.

    As output we want to have the transition matrices for different taus.
    """
    input:
        assignments = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/assignments.npy",
    benchmark:
        f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{tau}}/matrix_benchmark.txt"
    output:
        transition_matrix = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{tau}}/transition_matrix.npz"
    run:
        from scipy.sparse import coo_array, csr_array, diags, dok_array

        from scipy import sparse
        from molgri.molecules.transitions import MSM

        # load data
        all_assignments = np.load(input.assignments)
        print("USING ASSIGNMENTS", len(all_assignments))
        print("LOADED NUM NANS3",np.count_nonzero(np.isnan(all_assignments)))
        #split_assignments = using_clump(all_assignments)
        #print("PREVIOUSLY", len(all_assignments), np.sum([len(x) for x in split_assignments]))

        print("nanmax", np.nanmax(all_assignments))
        num_cells = int(np.nanmax(all_assignments))+1
        #print("nan number", np.count_nonzero(np.isnan(all_assignments)), [np.count_nonzero(np.isnan(x)) for x in split_assignments])

        my_msm = MSM(all_assignments, total_num_cells=num_cells) # WARNING! CHANGED
        my_transition_matrices = my_msm.get_one_tau_transition_matrix(
            noncorrelated_windows=False, tau=wildcards.tau)
        # save the result
        sparse.save_npz(output.transition_matrix, my_transition_matrices)
        #t2 = time()
        #log_the_run(wildcards.unique_id, input, output, log.log, None, t2-t1)

rule run_decomposition_msm:
    """
    As output we want to have eigenvalues, eigenvectors. Es input we get a (sparse) rate matrix.
    """
    input:
        transition_matrix = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{tau}}/transition_matrix.npz"
    benchmark:
        f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{tau}}/decomposition_benchmark_{{sigma}}_{{which}}.txt"
    output:
        eigenvalues = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{tau}}/eigenvalues_msm_{{sigma}}_{{which}}.npy",
        eigenvectors = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{tau}}/eigenvectors_msm_{{sigma}}_{{which}}.npy"
    params:
        # 1 and LR not right
        tol = 1e-5,
        maxiter = 100000
    run:
        from molgri.molecules.transitions import DecompositionTool
        from scipy import sparse

        # loading
        my_matrix = sparse.load_npz(input.transition_matrix)

        # calculation
        dt = DecompositionTool(my_matrix)
        if wildcards.sigma == "None":
            sigma = None
        else:
            sigma = float(wildcards.sigma)
        print()

        all_eigenval, all_eigenvec = dt.get_decomposition(tol=params.tol, maxiter=params.maxiter,
            which=wildcards.which,
            sigma=sigma)

        # saving to file
        np.save(output.eigenvalues, np.array(all_eigenval))
        np.save(output.eigenvectors, np.array(all_eigenvec))

rule correct_msm_eigenvectors:
    """
    Select only the ones that are not exchanges with boundary
    """
    input:
        eigenvalues = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{tau}}/eigenvalues_msm_{{sigma}}_{{which}}.npy",
        eigenvectors = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{tau}}/eigenvectors_msm_{{sigma}}_{{which}}.npy"
    output:
        corr_eigenvalues = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{tau}}/eigenvalues_correctedmsm_{{sigma}}_{{which}}.npy",
        corr_eigenvectors = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{tau}}/eigenvectors_correctedmsm_{{sigma}}_{{which}}.npy"
    run:
        import numpy as np
        original_eigenvalues = np.load(input.eigenvalues)
        original_eigenvectors = np.load(input.eigenvectors)

        corrected_eigenvalues = []
        corrected_eigenvectors = []
        for one_orig_eigenvalue, one_orig_eigenvec in zip(original_eigenvalues, original_eigenvectors.T):
            eigenvec_len = len(one_orig_eigenvec)
            magnitude_eigenvec = np.abs(one_orig_eigenvec)
            # correct eigenvectors are the ones where over 70% of the total absolute value is in the middle 30%
            success = np.sum(magnitude_eigenvec[int(eigenvec_len/3):int(2*eigenvec_len/3)]) > 0.8*np.sum(magnitude_eigenvec)
            print(np.sum(magnitude_eigenvec[int(eigenvec_len/3):int(2*eigenvec_len/3)]), 0.8*np.sum(magnitude_eigenvec))
            if success:
                corrected_eigenvalues.append(one_orig_eigenvalue)
                corrected_eigenvectors.append(one_orig_eigenvec)
        np.save(output.corr_eigenvalues, np.array(corrected_eigenvalues))
        np.save(output.corr_eigenvectors,np.array(corrected_eigenvectors).T)


rule run_plot_everything_msm:
    """
    Some stuff to plot after a MSM calculation: eigenvalues, ITS, eigenvectors
    """
    input:
        eigenvalues = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{tau}}/eigenvalues_{{is_corrected}}_{{sigma}}_{{which}}.npy",
        eigenvectors = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{tau}}/eigenvectors_{{is_corrected}}_{{sigma}}_{{which}}.npy",
    output:
        plot_eigenvectors = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{tau}}/eigenvectors_{{is_corrected}}_{{sigma}}_{{which}}.png",
        plot_eigenvalues = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{tau}}/eigenvalues_{{is_corrected}}_{{sigma}}_{{which}}.png",
    run:
        from molgri.plotting.transition_plots import PlotlyTransitions
        pt = PlotlyTransitions(is_msm=True, path_eigenvalues=input.eigenvalues, path_eigenvectors=input.eigenvectors,
            tau_array=None)
        # eigenvectors
        pt.plot_eigenvectors_flat(index_tau=wildcards.tau)
        pt.save_to(output.plot_eigenvectors, height=1200)
        # eigenvalues
        pt.plot_eigenvalues(index_tau=wildcards.tau)
        pt.save_to(output.plot_eigenvalues)

rule run_plot_its_msm:
    input:
        eigenvalues = expand(f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{tau}}/eigenvalues_{{is_corrected}}_{{sigma}}_{{which}}.npy",
            tau=TAUS, allow_missing=True),
        runfile= f"{PATH_EXPERIMENTS}{{unique_id}}/mdrun.mdp",
    output:
        plot_its = report(f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/its_{{is_corrected}}_{{sigma}}_{{which}}.png",
        category="MSM")
    run:
        writeout = int(read_from_mdrun(input.runfile,"nstxout-compressed"))
        timesteps = float(read_from_mdrun(input.runfile,"dt"))
        from molgri.plotting.transition_plots import PlotlyTransitions
        pt = PlotlyTransitions(is_msm=True, path_eigenvalues=input.eigenvalues, path_eigenvectors=None,
            tau_array=TAUS)
        print("")
        pt.plot_its_msm(writeout=writeout, time_step_ps=timesteps)
        pt.save_to(output.plot_its)


rule compile_vmd_log:
    """
    Input are the saved eigenvectors. Output = a vmd log that can be used later with:

    vmd <gro file> <xtc file>
    play <vmdlog file>
    """
    input:
        structure = f"{PATH_EXPERIMENTS}{{unique_id}}/structure.gro",
        trajectory = f"{PATH_EXPERIMENTS}{{unique_id}}/trajectory.xtc",
        eigenvectors=f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{tau}}/eigenvectors_{{is_corrected}}_{{sigma}}_{{which}}.npy",
        assignments=f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/assignments.npy",
        # in the script only the numbers for frames need to be changed.
        script="molgri/scripts/vmd_show_eigenvectors_ar",
    output:
        vmdlog=f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{tau}}/eigenvectors_{{is_corrected}}_{{sigma}}_{{which}}_vmdlog_msm",
        fig_tga = expand(f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{tau}}/eigenvector_{{i}}_{{sigma}}_{{which}}_{{is_corrected}}.tga", i=[0, 1, 2, 3, 4], allow_missing=True),
        fig_png= report(expand(f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{tau}}/eigenvector_{{i}}_{{sigma}}_{{which}}_{{is_corrected}}.png",i=[0, 1, 2, 3, 4], allow_missing=True),
        category="{unique_id}")
    params:
        num_extremes=30,
        num_eigenvec=5  # only show the first num_eigenvec
    run:
        from molgri.plotting.create_vmdlog import show_eigenvectors_MSM

        eigenvectors = np.load(input.eigenvectors)
        #print("  ")
        #print("LEN  ASSIGNMENTS", len(np.load(input.assignments)))

        show_eigenvectors_MSM(input.script, output.vmdlog, input.assignments, eigenvector_array=eigenvectors,num_eigenvec=params.num_eigenvec,
            num_extremes=params.num_extremes, figure_paths=output.fig_tga)
        shell("vmd {input.structure} {input.trajectory} < {output.vmdlog}")
        for el_tga, el_png in zip(output.fig_tga, output.fig_png):
            shell("convert {el_tga} {el_png}")


rule print_its:
    input:
        eigenvalues = expand(f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{tau}}/eigenvalues_{{is_corrected}}_{{sigma}}_{{which}}.npy",
            sigma="None", which="LR", is_corrected=["msm"],allow_missing=True),
        runfile= f"{PATH_EXPERIMENTS}{{unique_id}}/mdrun.mdp",
    output:
        data = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{tau}}/its.csv"
    run:
        import pandas as pd

        writeout = int(read_from_mdrun(input.runfile,"nstxout-compressed"))
        timesteps = float(read_from_mdrun(input.runfile,"dt"))

        all_its = []
        for one_eigenvalues_file in input.eigenvalues:
            eigenvals = np.load(one_eigenvalues_file)[1:]  # dropping the first one as it should be zero and cause issues
            all_its.append(-1* np.array(int(wildcards.tau) * writeout * timesteps / np.log(np.abs(eigenvals))))
        my_df = pd.DataFrame(all_its, columns=[f"ITS {i} [ps]" for i in range(1, len(all_its[0])+1)])
        my_df.to_csv(output.data)
