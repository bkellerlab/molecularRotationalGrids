# add molgri directory
import sys
sys.path.append(".")


from molgri.paths import PATH_OUTPUT_AUTOSAVE, PATH_INPUT_BASEGRO, PATH_EXPERIMENTS

rule compare_distance_measurements:
    input:
        structure = "experiments/one_sqra/bigger_ideal/structure.gro",
        trajectory = "experiments/one_sqra/bigger_ideal/trajectory.trr",
        reference_m2 = f"experiments/one_sqra/m2.gro",
    run:
        import MDAnalysis as mda
        from MDAnalysis.analysis import rms
        import numpy as np
        import seaborn as sns
        import matplotlib.pyplot as plt
        import pandas as pd
        from scipy.optimize import curve_fit
        from scipy.spatial.transform import Rotation
        from molgri.molecules.transitions import AssignmentTool
        from molgri.space.utils import distance_between_quaternions

        universe = mda.Universe(input.structure, input.trajectory)
        assignment_tool = AssignmentTool(np.array([[0, 0, 1],[0,0,0]]), input.structure, input.trajectory, input.structure, only_till_step=10, n_jobs=1)
        xs = np.arange(0, len(universe.trajectory))

        # simple rmsd distance
        universe.trajectory[0]  # set to first frame
        rmsd_analysis = rms.RMSD(universe.atoms, ref_frame=0, select='bynum 1:3', groupselections=["bynum 4:6"])
        rmsd_analysis.run()
        rmsd_distance_from_frame0 = rmsd_analysis.rmsd[:, -1]
        print(pd.DataFrame(rmsd_distance_from_frame0).describe())

        # my own distance measure
        current_quaternions = Rotation.from_matrix(assignment_tool._get_rotation_matrices()).as_quat()
        first_quat = np.tile(current_quaternions[0], reps=len(universe.trajectory)).reshape((-1, 4))
        #print(  current_quaternions[0].tile().reshape((4,-1)))
        quat_dist = distance_between_quaternions(current_quaternions, first_quat)
        com_dist = assignment_tool._get_coms_m2()
        xdata = np.vstack((quat_dist, com_dist))

        def f(x, a, b, c):
            return a*x[0]+b*x[1]+c

        #rest_output = curve_fit(f, xdata, ydata=rmsd_distance_from_frame0, full_output=True)
        #print(rest_output)
        #params = rest_output[0]

        #fitted_func = f(xdata, *params)

        fig, ax = plt.subplots(1, 2)
        sns.scatterplot(rmsd_distance_from_frame0, ax=ax[0])
        #sns.scatterplot(fitted_func,ax=ax[0])
        sns.scatterplot(x=com_dist, y=quat_dist, ax=ax[1])
        plt.show()


include: "Snakefile_grids"

