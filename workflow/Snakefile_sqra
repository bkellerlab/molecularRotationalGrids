"""
All of the workflows relating to pseudotrajectories, subsequent SQRAs and their related outputs (figures ...)
"""
from time import time

import numpy as np

# add molgri directory
import sys

from workflow.snakemake_utils import find_config_parameter_value

sys.path.append(".")

from molgri.paths import PATH_OUTPUT_AUTOSAVE, PATH_INPUT_BASEGRO, PATH_EXPERIMENTS

include: "Snakefile_grids"

wildcard_constraints:
    unique_id=".*sqra.*"


rule run_pt:
    """
    This rule should produce the .gro and .xtc files of the pseudotrajectory.
    """
    input:
        molecule1 = f"{PATH_EXPERIMENTS}{{unique_id}}/m1.gro",
        molecule2 = f"{PATH_EXPERIMENTS}{{unique_id}}/m2.gro",
        grid = f"{PATH_OUTPUT_AUTOSAVE}{{grid_identifier}}_full_array.npy",
    output:
        structure = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/structure.gro",
        trajectory = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/trajectory.trr"
    params:
        cell_size_A = 30  # cubic box will be the output, this is size of the box in one dimension
    run:
        from molgri.io import PtWriter

        my_writer = PtWriter(input.molecule1, input.molecule2, cell_size_A=params.cell_size_A, path_grid=input.grid)
        my_writer.write_full_pt(path_output_pt=output.trajectory, path_output_structure=output.structure)


rule gromacs_rerun:
    """
    This rule gets structure, trajectory, topology and gromacs run file as input, as output we are only interested in
    energies.
    """

    input:
        structure = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/structure.gro",
        trajectory = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/trajectory.trr",
        runfile = f"{PATH_EXPERIMENTS}{{unique_id}}/mdrun.mdp",
        topology = f"{PATH_EXPERIMENTS}{{unique_id}}/topology.top",
        select_energy = f"{PATH_EXPERIMENTS}{{unique_id}}/select_energy",
    shadow: "copy-minimal"
    output:
        energy = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/energy.xvg",
    # use with arguments like path_structure path_trajectory path_topology path_default_files path_output_energy
    shell:
        """
        #!/bin/bash
        export PATH="/home/janjoswig/local/gromacs-2022/bin:$PATH"
        gmx22 grompp -f {input.runfile} -c {input.structure} -p {input.topology} -o result.tpr
        gmx22 mdrun -s result.tpr -rerun {input.trajectory}
        gmx22 energy -f ener.edr -o {output.energy} < {input.select_energy}
        """


rule run_sqra:
    """
    As input we need: energies, adjacency, volume, borders, distances.
    As output we want to have the rate matrix.
    """
    input:
        energy = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/energy.xvg",
        distances_array = f"{PATH_OUTPUT_AUTOSAVE}{{grid_identifier}}_distances_array.npz",
        borders_array = f"{PATH_OUTPUT_AUTOSAVE}{{grid_identifier}}_borders_array.npz",
        volumes = f"{PATH_OUTPUT_AUTOSAVE}{{grid_identifier}}_volumes.npy",
        config_file= f"{PATH_EXPERIMENTS}{{unique_id}}/experiment_config.txt"
    output:
        rate_matrix = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/rate_matrix.npz",
        index_list = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/index_list.npy",
    params:
        D=0.0126,# diffusion constant in Angstrom^2/ps
        T=273,# temperature in K
        energy_type="Potential",
        m_h2o = 3e-26 #kg
    run:
        from molgri.molecules.transitions import SQRA
        from molgri.io import GridReader, EnergyReader
        from scipy import sparse
        from scipy.constants import k as k_B

        tau = coupling = find_config_parameter_value(input.config_file,"coupling_constant_ps")

        D = k_B * params.T * float(tau) * 1e-12 / params.m_h2o *1e8 # units should be A^2/ps
        print(f"Diffusion const D={D}")


        # load input files
        gr = GridReader()
        all_volumes = gr.load_volumes(input.volumes)
        all_surfaces = gr.load_borders_array(input.borders_array)
        all_distances = gr.load_distances_array(input.distances_array)

        # determine limits
        if wildcards.lower_lim == "None":
            lower_limit = None
        else:
            lower_limit = float(wildcards.lower_lim)
        if wildcards.upper_lim == "None":
            upper_limit = None
        else:
            upper_limit = float(wildcards.upper_lim)

        energies = EnergyReader().load_single_energy_column(input.energy, params.energy_type)

        sqra = SQRA(energies=energies,volumes=all_volumes,distances=all_distances,surfaces=all_surfaces)
        rate_matrix = sqra.get_rate_matrix(D,params.T)
        rate_matrix, index_list = sqra.cut_and_merge(rate_matrix,T=params.T,lower_limit=lower_limit,
            upper_limit=upper_limit)

        # saving to file
        sparse.save_npz(output.rate_matrix,rate_matrix)
        np.save(output.index_list,np.array(index_list,dtype=object))

ALL_LOWER = [None, 0.001, 0.005, 0.01, 0.05, 0.1]   # if neighbouring cells differ less than that will be merged
ALL_UPPER = [None, 10, 20, 30, 50, 100, 300] # if energy above this the cell will be cut
rule print_rate_size:
    input:
        rate_matrix = expand(f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/rate_matrix.npz",
            lower_lim=ALL_LOWER, upper_lim=ALL_UPPER, allow_missing=True),
        eigenvalues= expand(f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/eigenvalues_{{sigma}}_{{which}}.npy",
            lower_lim=ALL_LOWER,upper_lim=ALL_UPPER,allow_missing=True, sigma=0, which="SR")
    output:
        rate_size = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/size_chart.png",
        eigenvalue_size= f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/size_eigenvalue.png"
    run:
        import matplotlib

        matplotlib.use('Agg')
        from scipy import sparse
        import matplotlib.pyplot as plt
        import seaborn as sns
        import pandas as pd
        all_sizes = []
        all_lower = []
        all_upper = []
        all_eigenvalues = []
        num_eigenval = 6
        for el in input.rate_matrix:
            my_matrix = sparse.load_npz(el)
            my_eigenval = np.load(input.eigenvalues)[:num_eigenval]
            my_size = my_matrix.shape[0]
            my_lower, my_upper = el.split("/")[3].split("-")
            all_sizes.append(my_size)
            if my_upper == "None":
                my_upper = None
            else:
                my_upper = float(my_upper)
            if my_lower == "None":
                my_lower = 0
            else:
                my_lower = float(my_lower)
            all_upper.append(my_upper)
            all_lower.append(my_lower)
            all_eigenvalues.append(my_eigenval)
        columns = ["Matrix size", r"Lower lim [k_BT]", r"Upper lim [k_BT]"]
        for i in range(num_eigenval):
            columns.append(f"Eigenvalue {i}")
        my_df = pd.DataFrame(data=np.array([all_sizes, all_lower, all_upper, *all_eigenvalues]).T, columns=columns)
        sns.scatterplot(data=my_df, x=r"Lower lim [k_BT]", y="Matrix size", hue=r"Upper lim [k_BT]")
        plt.savefig(output.rate_size)
        fig, ax = plt.subplots(1,num_eigenval)
        for i, subax in enumerate(ax):
            sns.scatterplot(data=my_df, x=r"Lower lim [k_BT]", y=f"Eigenvalue {i}", hue=r"Upper lim [k_BT]", ax=subax)
        plt.savefig(output.eigenvalue_size)

rule run_decomposition:
    """
    As output we want to have eigenvalues, eigenvectors. Es input we get a (sparse) rate matrix.
    """
    input:
        rate_matrix = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/rate_matrix.npz",
    output:
        eigenvalues = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/eigenvalues_{{sigma}}_{{which}}.npy",
        eigenvectors = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/eigenvectors_{{sigma}}_{{which}}.npy",
    params:
        tol=1e-8,
        maxiter=100000,
    run:
        from scipy import sparse
        from molgri.molecules.transitions import DecompositionTool

        # loading
        my_matrix = sparse.load_npz(input.rate_matrix)

        if wildcards.sigma == "None":
            sigma = None
        else:
            sigma = float(wildcards.sigma)
        # calculation
        dt = DecompositionTool(my_matrix)
        all_eigenval, all_eigenvec = dt.get_decomposition(tol=params.tol, maxiter=params.maxiter, which=wildcards.which,
            sigma=sigma)

        # saving to file
        np.save(output.eigenvalues,np.array(all_eigenval))
        np.save(output.eigenvectors,np.array(all_eigenvec))


rule run_plot_everything_sqra:
    """
    Make a plot of eigenvalues
    """
    input:
        eigenvalues = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/eigenvalues_{{sigma}}_{{which}}.npy",
        eigenvectors = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/eigenvectors_{{sigma}}_{{which}}.npy",
    output:
        plot_eigenvectors=f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/eigenvectors_{{sigma}}_{{which}}.png",
        plot_eigenvalues=f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/eigenvalues_{{sigma}}_{{which}}.png",
        plot_its=report(f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/its_{{sigma}}_{{which}}.png", category="SQRA"),
    run:
        from molgri.plotting.transition_plots import PlotlyTransitions

        pt = PlotlyTransitions(is_msm=False,path_eigenvalues=input.eigenvalues,path_eigenvectors=input.eigenvectors)
        # eigenvectors
        pt.plot_eigenvectors_flat()
        pt.save_to(output.plot_eigenvectors,height=1200)
        # eigenvalues
        pt.plot_eigenvalues()
        pt.save_to(output.plot_eigenvalues)
        # # its for msm
        pt.plot_its_as_line()
        pt.save_to(output.plot_its)
        # we could also plot the heatmap of the matrix, but it's honestly not that useful and can become very large

rule compile_vmd_log:
    """
    Input are the saved eigenvectors. Output = a vmd log that can be used later with:

    vmd <gro file> <xtc file>
    play <vmdlog file>
    """
    input:
        eigenvectors = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/eigenvectors_{{sigma}}_{{which}}.npy",
        index_list = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/index_list.npy",
        # in the script only the numbers for frames need to be changed.
        script="molgri/scripts/vmd_show_eigenvectors"
    output:
        vmdlog = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/eigenvectors_{{sigma}}_{{which}}_vmdlog_sqra"
    params:
        num_extremes=50,
        num_eigenvec=6  # only show the first num_eigenvec
    run:
        from molgri.plotting.create_vmdlog import show_eigenvectors

        # load eigenvectors
        eigenvectors = np.load(input.eigenvectors)
        index_list = np.load(input.index_list,allow_pickle=True)
        if not index_list:
            index_list = None
        else:
            index_list = list(index_list)
        show_eigenvectors(input.script,output.vmdlog,eigenvector_array=eigenvectors,num_eigenvec=params.num_eigenvec,num_extremes=params.num_extremes,index_list=index_list)
