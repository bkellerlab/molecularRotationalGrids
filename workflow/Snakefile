# add molgri directory
import sys
sys.path.append(".")


from molgri.paths import PATH_OUTPUT_AUTOSAVE, PATH_INPUT_BASEGRO, PATH_EXPERIMENTS
from workflow.snakemake_utils import find_config_parameter_value, modify_topology, modify_mdrun
from molgri.constants import TAUS


ALL_LOWER = [None, 0.001, 0.005, 0.01, 0.05, 0.1]   # if neighbouring cells differ less than that will be merged
ALL_UPPER = [None, 10, 20, 30, 50, 100, 300] # if energy above this the cell will be cut

# [f"bounds_water_msm_{i:03d}" for i in [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14]]
import os
#print(os.listdir("experiments/"))
rule all:
    input:
       # "experiments/one_sqra/bigger_ideal/size_chart.png"
       msm_all1 = expand(f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/its_{{sigma}}_{{which}}.png",
            unique_id=[f"msm_tau_{i:02d}" for i in range(1,5)],
            grid_identifier=["80_80_30_short"], sigma=None, which="LR"),
        msm_all2 = expand(f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{tau}}/eigenvectors_msm_{{sigma}}_{{which}}{{suffix}}",
            unique_id=[f"msm_tau_{i:02d}" for i in range(1, 5)],
            grid_identifier=["80_80_30_short"], sigma=None, which="LR",
            tau=TAUS, suffix=[".png", "_vmdlog_msm"]),
        # sqra = expand(f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/its_{{sigma}}_{{which}}.png",
        #     unique_id=[f"sqra_tau_{i:02d}" for i in range(1,5)], grid_identifier=["bigger_ideal"], sigma=[0], which=["SR"], lower_lim=None, upper_lim=None),   #["300grand_long", "80_80_30_short"]
        # sqra2 = expand(f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/eigenvectors_{{sigma}}_{{which}}_vmdlog_sqra",
        # unique_id=[f"sqra_tau_{i:02d}" for i in range(1,5)], grid_identifier=["bigger_ideal"], sigma=[0], which=["SR"], lower_lim=None, upper_lim=None)

rule create_config_file:
    """
    The point here is to get the unique ID of the experiment, read all of its parameters from a database of experiments 
    and write them to a file within this experiment folder.
    """
    input:
        experiments_database = "workflow/experiments.csv"
    output:
        config_file = f"{PATH_EXPERIMENTS}{{unique_id}}/experiment_config.txt"
    run:
        # read in all parameters
        import pandas as pd
        experiments = pd.read_csv(input.experiments_database, index_col=0)
        columns = experiments.columns
        with open(output.config_file, "w") as f:
            print(experiments, wildcards.unique_id)
            for i, parameter_value in enumerate(experiments.loc[wildcards.unique_id]):
                f.write(f"{columns[i]}={parameter_value}\n")

rule prepare_water_water:
    """
    Here, everything is specific to a water-water system set up. Create a new folder in experiments/ and populate it 
    with correctly defined inputs for the gromacs run etc.
    """
    input:
        water_gro = f"{PATH_INPUT_BASEGRO}H2O.gro",
        water_top = f"{PATH_INPUT_BASEGRO}H2O_H2O.top",
        base_mdp_file = f"{PATH_INPUT_BASEGRO}mdrun.mdp",
        select_group=f"{PATH_INPUT_BASEGRO}select_group_zero",
        select_energy=f"{PATH_INPUT_BASEGRO}select_energy_five",
        select_centers=f"{PATH_INPUT_BASEGRO}select_3_and_0",
        index_m1=f"{PATH_INPUT_BASEGRO}index_first_mol.ndx",
        config_file = f"{PATH_EXPERIMENTS}{{unique_id}}/experiment_config.txt"
    output:
        molecule1 = f"{PATH_EXPERIMENTS}{{unique_id}}/m1.gro",
        molecule2 = f"{PATH_EXPERIMENTS}{{unique_id}}/m2.gro",
        runfile = f"{PATH_EXPERIMENTS}{{unique_id}}/mdrun.mdp",
        topology = f"{PATH_EXPERIMENTS}{{unique_id}}/topology.top",
        select_group = f"{PATH_EXPERIMENTS}{{unique_id}}/select_group",
        select_energy = f"{PATH_EXPERIMENTS}{{unique_id}}/select_energy",
        select_centers = f"{PATH_EXPERIMENTS}{{unique_id}}/select_centers",
        index_m1 = f"{PATH_EXPERIMENTS}{{unique_id}}/index_m1.ndx",
    run:
        import shutil
        # stuff that can be copied without being modified
        shutil.copy(input.water_gro,output.molecule1)
        shutil.copy(input.water_gro,output.molecule2)
        shutil.copy(input.select_group, output.select_group)
        shutil.copy(input.select_energy,output.select_energy)
        shutil.copy(input.select_centers,output.select_centers)
        shutil.copy(input.index_m1, output.index_m1)

        # depending on config parameters, topology and runfile will be adapted
        shutil.copy(input.water_top, output.topology)
        shutil.copy(input.base_mdp_file, output.runfile)

        # modify runfile with given parameters
        trajectory_len = find_config_parameter_value(input.config_file,"traj_len")
        integrator = find_config_parameter_value(input.config_file,"integrator")
        coupling = find_config_parameter_value(input.config_file,"coupling_constant_ps")
        modify_mdrun(output.runfile, "integrator", integrator)
        modify_mdrun(output.runfile,"nsteps",trajectory_len)
        modify_mdrun(output.runfile,"tau_t",coupling)
        # modify topology with given parameters
        up1_nm = find_config_parameter_value(input.config_file,"up1_nm")
        up2_nm = find_config_parameter_value(input.config_file,"up2_nm")
        force = find_config_parameter_value(input.config_file,"force")
        modify_topology(output.topology,i="1",j="4",funct=10,low=0.0,up1=up1_nm,up2=up2_nm,force_constant=force)


rule find_constant_factor:
    input:
        tau_msm_eigv = expand(f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{tau}}/eigenvalues_msm_{{sigma}}_{{which}}.npy", unique_id=[f"msm_tau_{i:02d}" for i in range(1, 5)],
            grid_identifier=["80_80_30_short"], sigma=None, which="LR", tau=[10, 30, 100]),
        tau_sqra_eigv = expand(f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/eigenvalues_{{sigma}}_{{which}}.npy",
            lower_lim="None",upper_lim="None",sigma=0, which="SR", unique_id=[f"sqra_tau_{i:02d}" for i in range(1, 5)],
            grid_identifier=["bigger_ideal"])
    output:
        f"{PATH_EXPERIMENTS}relative_its.png"
    params:
        msm_indices_to_use = [2]
    run:
        import numpy as np
        import pandas as pd
        coupling_constants = [0.001, 0.01, 0.1, 1]
        for my_msm_eigv, my_sqra_eigv, coupling in zip(input.tau_msm_eigv, input.tau_msm_eigv, coupling_constants):
            msm_eigenvalues = np.load(my_msm_eigv)
            for my_index in params.msm_indices_to_use:
                pass



include: "Snakefile_grids"
include: "Snakefile_msm"
include: "Snakefile_sqra"
