"""
All of the workflows relating to production of trajectories, subsequent MSMs and their related outputs (figures ...)
"""
# add molgri directory
import sys
sys.path.append(".")
import numpy as np


from molgri.paths import PATH_INPUT_BASEGRO, PATH_EXPERIMENTS
from workflow.snakemake_utils import modify_mdrun, modify_topology, read_from_mdrun

include: "run_grid"

PATH_EXPERIMENTS = "ex_exp/"


# here add other experiment types that should be performed with this pipeline
if config["experiment_type"] not in ["msm_water_in_vacuum", "msm_water_in_helium"]:
    raise AttributeError(f"This pipeline should be used for MSM experiments. Your experiment type {config['experiment_type']} is not available here.")

EXPERIMENT_TYPE = config["experiment_type"]
EXPERIMENT_ID = config["experiment_id"]
GRID_ID = config["grid_identifier"]
TAUS = np.array(config["params_msm"]["taus_msm_all"])
TAUS_TO_PLOT = np.array(config["params_msm"]["taus_msm_to_plot"])


rule all_msm:
    input:
        expand(f"{PATH_EXPERIMENTS}{EXPERIMENT_TYPE}/{EXPERIMENT_ID}/{GRID_ID}/{{what}}", what=["its.png"]),
        expand(f"{PATH_EXPERIMENTS}{EXPERIMENT_TYPE}/{EXPERIMENT_ID}/{GRID_ID}/{{tau}}/{{what}}", tau=TAUS_TO_PLOT,
            what=["eigenvectors_vmdlog", "eigenvalues.png", "its.csv"])

################## specific to water in vacuum #################
rule prepare_water_in_vacuum:
    """
    Here, everything is specific to a water-water system set up. Create a new folder in experiments/ and populate it
    with correctly defined inputs for the gromacs run etc.
    """
    wildcard_constraints:
        experiment_type=".*msm_water_in_vacuum.*"
    input:
        water_gro = f"{PATH_INPUT_BASEGRO}H2O.gro",
        water_top = f"{PATH_INPUT_BASEGRO}H2O_H2O.top",
        base_mdp_file = f"{PATH_INPUT_BASEGRO}mdrun.mdp",
        select_group=f"{PATH_INPUT_BASEGRO}select_group_zero",
        select_centers=f"{PATH_INPUT_BASEGRO}select_3_and_0",
        index_m1=f"{PATH_INPUT_BASEGRO}index_first_mol.ndx",
    output:
        molecule1 = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/m1.gro",
        molecule2 = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/m2.gro",
        runfile = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/mdrun.mdp",
        topology = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/topology.top",
        select_group = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/select_group",
        select_centers = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/select_centers",
        index_m1 = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/index_m1.ndx",
    params:
        nsteps = config["params_setup"]["nsteps"],
        integrator = config["params_setup"]["integrator"],
        dt_ps = config["params_setup"]["dt_ps"],
        energy_writeout_frequency = config["params_setup"]["energy_writeout_frequency"],
        compressed_writeout_frequency = config["params_setup"]["compressed_writeout_frequency"],
        epsilon = config["params_setup"]["epsilon"],
        tau_t= config["params_setup"]["tau_t"],
        up1_nm= config["params_setup"]["up1_nm"],
        up2_nm= config["params_setup"]["up2_nm"],
        force_constant_restraint= config["params_setup"]["force_constant_restraint"],
    run:
        import shutil
        # stuff that can be copied without being modified
        shutil.copy(input.water_gro,output.molecule1)
        shutil.copy(input.water_gro,output.molecule2)
        shutil.copy(input.select_group, output.select_group)

        shutil.copy(input.select_centers,output.select_centers)
        shutil.copy(input.index_m1, output.index_m1)

        # depending on config parameters, topology and runfile will be adapted
        shutil.copy(input.water_top, output.topology)
        shutil.copy(input.base_mdp_file, output.runfile)

        # modify runfile with given parameters
        modify_mdrun(output.runfile, "integrator", params.integrator)
        modify_mdrun(output.runfile,"nsteps",params.nsteps)
        modify_mdrun(output.runfile,"tau_t",params.tau_t)
        modify_mdrun(output.runfile,"dt",params.dt_ps)
        modify_mdrun(output.runfile,"nstenergy", params.energy_writeout_frequency)
        modify_mdrun(output.runfile,"nstxout-compressed",params.compressed_writeout_frequency)
        modify_mdrun(output.runfile,"epsilon-r",params.epsilon)
        # modify topology with given parameters
        modify_topology(output.topology,i="1",j="4",funct=10,low=0.0,up1=params.up1_nm,up2=params.up2_nm,
            force_constant=params.force_constant_restraint)

# note: here we don't wanna refer to specific rule outputs as different rules for set up may be used
rule create_msm_gro:
    """
    Create a structure from two molecules. Expected in the folder: m1.gro, m2.gro
    """
    wildcard_constraints:
        experiment_type=".*msm_water_in_vacuum.*"
    input:
        molecule1 = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/m1.gro",
        molecule2 = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/m2.gro",
    output:
        structure = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/structure.gro"
    params:
        start_dist_A = config["params_msm"]["start_dist_A"],  # distance between centers of mass of both molecules in the combined structure
        cell_size_A = config["params_msm"]["cell_size_A"]  # cubic box will be the output, this is size of the box in one dimension
    run:
        import MDAnalysis as mda
        from MDAnalysis import Merge
        from scipy.spatial.transform import Rotation

        central_molecule = mda.Universe(input.molecule1)
        moving_molecule = mda.Universe(input.molecule2)

        # center the both molecules
        com1 = central_molecule.atoms.center_of_mass()
        com2 = moving_molecule.atoms.center_of_mass()
        central_molecule.atoms.translate(-com1)
        moving_molecule.atoms.translate(-com2)
        # translate the second one
        moving_molecule.atoms.translate([0, 0, float(params.start_dist_A)])
        moving_molecule.atoms.rotate(Rotation.random().as_matrix(), point=moving_molecule.atoms.center_of_mass())

        # merge and write
        merged_u = Merge(central_molecule.atoms, moving_molecule.atoms)
        merged_u.dimensions = (params.cell_size_A, params.cell_size_A, params.cell_size_A, 90, 90, 90)
        with mda.Writer(output.structure) as writer:
            writer.write(merged_u)

rule run_msm_gromacs:
    """
    This rule gets structure, trajectory, topology and gromacs run file as input, as output we are only interested in
    energies.
    """
    wildcard_constraints:
        experiment_type=".*msm_water_in_vacuum.*"
    input:
        structure = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/structure.gro",
        runfile = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/mdrun.mdp",
        topology = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/topology.top",
        select_group = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/select_group",
        index_m1 = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/index_m1.ndx",
        select_centers= f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/select_centers",
    shadow: "shallow"
    log:
         log = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/logging_gromacs.log"
    benchmark:
        f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/gromacs_benchmark.txt"
    output:
        trajectory = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/trajectory.xtc",
        temp=f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/temp.xtc",
        temp2=f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/temp2.xtc"
    shell:
        """
        initial_dir=$(pwd)
        cd $(dirname {input.structure})
        export PATH="/home/janjoswig/local/gromacs-2022/bin:$PATH"
        gmx22 grompp -f $(basename {input.runfile}) -o result.tpr -c $(basename {input.structure}) -p $(basename {input.topology})
        gmx22 trjconv -f $(basename {input.structure}) -s result.tpr -o temp.trr < $(basename {input.select_group})
        gmx22 mdrun -s result.tpr -x $(basename {output.temp}) -e ener.edr -g $(basename {log.log})
        gmx22 trjconv -f $(basename {output.temp}) -s result.tpr -pbc mol -center -o $(basename {output.temp2}) -n $(basename {input.index_m1}) < $(basename {input.select_centers})
        gmx22 trjconv -fit rot+trans -f $(basename {output.temp2}) -o $(basename {output.trajectory}) -s $(basename {input.structure}) -n $(basename {input.index_m1}) < $(basename {input.select_centers})
        cd "$initial_dir" || exit
        """



################## specific to water in helium #################
rule prepare_water_in_helium:
    """
    Here, everything is specific to a water-water system set up. Create a new folder in experiments/ and populate it
    with correctly defined inputs for the gromacs run etc.
    """
    wildcard_constraints:
        experiment_type=".*msm_water_in_helium.*"
    input:
        full_structure = f"{PATH_INPUT_BASEGRO}nvt_fake_ar.gro",
        forcefield1 = f"{PATH_INPUT_BASEGRO}argon_forcefield.itp",
        forcefield2 = f"{PATH_INPUT_BASEGRO}ffnonbonded.itp",
        forcefield3 = f"{PATH_INPUT_BASEGRO}ffbonded.itp",
        water_in_arg_top = f"{PATH_INPUT_BASEGRO}topol_fake_ar.top",
        water_gro = f"{PATH_INPUT_BASEGRO}H2O.gro",
        #water_top = f"{PATH_INPUT_BASEGRO}H2O_H2Op.top",
        base_mdp_file = f"{PATH_INPUT_BASEGRO}mdrun.mdp",
        select_group=f"{PATH_INPUT_BASEGRO}select_group_zero",
        select_centers=f"{PATH_INPUT_BASEGRO}select_3_and_0",
        select_two=f"{PATH_INPUT_BASEGRO}select_2",
        index_m1=f"{PATH_INPUT_BASEGRO}index_first_mol.ndx",
    output:
        full_structure= f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/full_structure.gro",
        forcefield1 = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/argon_forcefield.itp",
        forcefield2 = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/ffnonbonded.itp",
        forcefield3 = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/ffbonded.itp",
        molecule1 = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/m1.gro",
        molecule2 = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/m2.gro",
        runfile = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/mdrun.mdp",
        topology = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/topology.top",
        select_group = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/select_group",
        select_centers = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/select_centers",
        select_two = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/select_two",
        index_m1 = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/index_m1.ndx",
    params:
        nsteps = config["params_setup"]["nsteps"],
        integrator = config["params_setup"]["integrator"],
        dt_ps = config["params_setup"]["dt_ps"],
        energy_writeout_frequency = config["params_setup"]["energy_writeout_frequency"],
        compressed_writeout_frequency = config["params_setup"]["compressed_writeout_frequency"],
        epsilon = config["params_setup"]["epsilon"],
        tau_t= config["params_setup"]["tau_t"],
        up1_nm= config["params_setup"]["up1_nm"],
        up2_nm= config["params_setup"]["up2_nm"],
        force_constant_restraint= config["params_setup"]["force_constant_restraint"],
    run:
        import shutil
        # stuff that can be copied without being modified
        shutil.copy(input.water_gro,output.molecule1)
        shutil.copy(input.water_gro,output.molecule2)
        shutil.copy(input.select_group, output.select_group)
        shutil.copy(input.forcefield1,output.forcefield1)
        shutil.copy(input.forcefield2,output.forcefield2)
        shutil.copy(input.forcefield3,output.forcefield3)
        shutil.copy(input.full_structure,output.full_structure)
        shutil.copy(input.select_centers,output.select_centers)
        shutil.copy(input.select_two,output.select_two)
        shutil.copy(input.index_m1, output.index_m1)

        # depending on config parameters, topology and runfile will be adapted
        shutil.copy(input.water_in_arg_top, output.topology)
        shutil.copy(input.base_mdp_file, output.runfile)

        # modify runfile with given parameters
        modify_mdrun(output.runfile, "integrator", params.integrator)
        modify_mdrun(output.runfile,"nsteps",params.nsteps)
        modify_mdrun(output.runfile,"tau_t",params.tau_t)
        modify_mdrun(output.runfile,"dt",params.dt_ps)
        modify_mdrun(output.runfile,"nstenergy", params.energy_writeout_frequency)
        modify_mdrun(output.runfile,"nstxout-compressed",params.compressed_writeout_frequency)
        modify_mdrun(output.runfile,"epsilon-r",params.epsilon)
        # modify topology with given parameters
        modify_topology(output.topology,i="1",j="4",funct=10,low=0.0,up1=params.up1_nm,up2=params.up2_nm,
            force_constant=params.force_constant_restraint)

rule run_msm_gromacs_in_helium:
    """
    This rule gets structure, trajectory, topology and gromacs run file as input, as output we are only interested in 
    energies.
    """
    wildcard_constraints:
        experiment_type=".*msm_water_in_helium.*"
    input:
        structure=rules.prepare_water_in_helium.output.full_structure,
        runfile = rules.prepare_water_in_helium.output.runfile,
        topology = rules.prepare_water_in_helium.output.topology,
        select_group = rules.prepare_water_in_helium.output.select_group,
        select_two= rules.prepare_water_in_helium.output.select_two,
        index_m1 = rules.prepare_water_in_helium.output.index_m1,
        select_centers= rules.prepare_water_in_helium.output.select_centers,
    log:
         log = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/logging_gromacs.log"
    benchmark:
        f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/gromacs_benchmark.txt"
    shadow: "shallow"
    output:
        only_water_structure = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/structure.gro",
        trajectory= f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/trajectory.xtc",
        temp= f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/temp.xtc",
        temp2 = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/temp2.xtc"
    shell:
        """
        initial_dir=$(pwd)
        cd $(dirname {input.structure})
        gmx22 trjconv -f $(basename {input.structure}) -s $(basename {input.structure}) -o $(basename {output.only_water_structure}) < $(basename {input.select_two})
        gmx22 grompp -f $(basename {input.runfile}) -o result.tpr -c $(basename {input.structure}) -p $(basename {input.topology})
        gmx22 trjconv -f $(basename {input.structure}) -s result.tpr -o $(basename {output.temp})  < $(basename {input.select_group})
        gmx22 mdrun -s result.tpr -x $(basename {output.temp}) -e ener.edr -g $(basename {log.log})
        gmx22 trjconv -f $(basename {output.temp}) -s result.tpr -pbc mol -center -o $(basename {output.temp2}) -n $(basename {input.index_m1}) < $(basename {input.select_centers})
        gmx22 trjconv -fit rot+trans -f $(basename {output.temp2}) -o $(basename {output.trajectory}) -s $(basename {input.structure}) -n $(basename {input.index_m1}) < $(basename {input.select_centers})
        cd "$initial_dir" || exit
        """

#        export PATH="/home/janjoswig/local/gromacs-2022/bin:$PATH"

################## end specific set-ups #################


rule run_trajectory_assignment:
    """
    A step before MSM - assign every frame of the trajectory to the corresponding cell

    As input we need the trajectory, structure and full array of the grid we wanna assign to.

    As output we get a cell index for every frame of the trajectory.
    """

    input:
        full_array = rules.run_grid.output.full_array,
        trajectory = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/trajectory.xtc",
        structure = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/structure.gro",
        molecule2 = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/m2.gro",
        runfile= f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/mdrun.mdp",
    benchmark:
        f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/{{grid_identifier}}/assignment_benchmark.txt"
    output:
        assignments=f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/{{grid_identifier}}/assignments.npy",
    params:
        include_outliers = config["params_grid"]["include_outliers"],
        cartesian_grid = config["params_grid"]["position_grid_is_cartesian"]
    run:
        from molgri.molecules.transitions import AssignmentTool
        from molgri.io import TwoMoleculeReader, OneMoleculeReader

        trajectory_universe = TwoMoleculeReader(input.structure,input.trajectory).get_full_pt()
        molecule2_universe = OneMoleculeReader(input.molecule2).get_molecule()

        # using all inputs
        my_grid = np.load(input.full_array)

        at = AssignmentTool(my_grid, trajectory_universe, molecule2_universe, cartesian_grid=params.cartesian_grid,
            include_outliers=params.include_outliers)
        assignments = at.get_full_assignments()
        print("NUM NANS1", np.count_nonzero(np.isnan(assignments)))

        # saving output
        np.save(output.assignments,assignments)


rule run_msm_matrix:
    """
    As input we need: assignments.

    As output we want to have the transition matrices for different taus.
    """
    input:
        assignments = rules.run_trajectory_assignment.output.assignments,
    benchmark:
        f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/{{grid_identifier}}/{{tau}}/matrix_benchmark.txt"
    output:
        transition_matrix = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/{{grid_identifier}}/{{tau}}/transition_matrix.npz"
    run:
        from molgri.molecules.transitions import MSM
        from scipy import sparse

        # load data
        my_assignments = np.load(input.assignments)
        print("LOADED NUM NANS3",np.count_nonzero(np.isnan(my_assignments)))
        num_cells = int(np.nanmax(my_assignments))+1

        my_msm = MSM(assigned_trajectory=my_assignments, total_num_cells=num_cells)
        my_transition_matrices = my_msm.get_one_tau_transition_matrix(
            noncorrelated_windows=False, tau=wildcards.tau)
        # save the result
        sparse.save_npz(output.transition_matrix, my_transition_matrices)

rule run_decomposition_msm:
    """
    As output we want to have eigenvalues, eigenvectors. Es input we get a (sparse) rate matrix.
    """
    input:
        transition_matrix = rules.run_msm_matrix.output.transition_matrix
    benchmark:
        f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/{{grid_identifier}}/{{tau}}/decomposition_benchmark.txt"
    output:
        eigenvalues = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/{{grid_identifier}}/{{tau}}/eigenvalues.npy",
        eigenvectors = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/{{grid_identifier}}/{{tau}}/eigenvectors.npy"
    params:
        # 1 and LR not right
        tol = config["params_msm"]["tol"],
        maxiter = config["params_msm"]["maxiter"],
        sigma = config["params_msm"]["sigma"],
        which = config["params_msm"]["which"]
    run:
        from molgri.molecules.transitions import DecompositionTool
        from scipy import sparse

        # loading
        my_matrix = sparse.load_npz(input.transition_matrix)

        # calculation
        dt = DecompositionTool(my_matrix)
        if params.sigma == "None":
            sigma = None
        else:
            sigma = float(params.sigma)

        all_eigenval, all_eigenvec = dt.get_decomposition(tol=params.tol, maxiter=params.maxiter,
            which=params.which,
            sigma=sigma)

        # saving to file
        np.save(output.eigenvalues, np.array(all_eigenval))
        np.save(output.eigenvectors, np.array(all_eigenvec))

rule run_plot_everything_msm:
    """
    Some stuff to plot after a MSM calculation: eigenvalues, ITS, eigenvectors
    """
    input:
        eigenvalues = rules.run_decomposition_msm.output.eigenvalues,
        eigenvectors = rules.run_decomposition_msm.output.eigenvectors
    output:
        plot_eigenvectors = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/{{grid_identifier}}/{{tau}}/eigenvectors.png",
        plot_eigenvalues = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/{{grid_identifier}}/{{tau}}/eigenvalues.png",
    run:
        from molgri.plotting.transition_plots import PlotlyTransitions
        pt = PlotlyTransitions(is_msm=True, path_eigenvalues=input.eigenvalues, path_eigenvectors=input.eigenvectors,
            tau_array=None)
        # eigenvectors
        pt.plot_eigenvectors_flat(index_tau=wildcards.tau)
        pt.save_to(output.plot_eigenvectors, height=1200)
        # eigenvalues
        pt.plot_eigenvalues(index_tau=wildcards.tau)
        pt.save_to(output.plot_eigenvalues)

rule run_plot_its_msm:
    input:
        eigenvalues = expand(f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/{{grid_identifier}}/{{tau}}/eigenvalues.npy",
            tau=TAUS, allow_missing=True),
        runfile= rules.run_msm_gromacs.input.runfile
    output:
        plot_its = report(f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/{{grid_identifier}}/its.png",
        category="MSM")
    run:
        writeout = int(read_from_mdrun(input.runfile,"nstxout-compressed"))
        timesteps = float(read_from_mdrun(input.runfile,"dt"))
        from molgri.plotting.transition_plots import PlotlyTransitions
        pt = PlotlyTransitions(is_msm=True, path_eigenvalues=input.eigenvalues, path_eigenvectors=None,
            tau_array=TAUS)
        pt.plot_its_msm(writeout=writeout, time_step_ps=timesteps)
        pt.save_to(output.plot_its)


rule compile_vmd_log:
    """
    Input are the saved eigenvectors. Output = a vmd log that can be used later with:

    vmd <gro file> <xtc file>
    play <vmdlog file>
    """
    input:
        structure = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/structure.gro",
        trajectory = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/trajectory.xtc",
        eigenvectors=rules.run_decomposition_msm.output.eigenvectors,
        assignments=rules.run_trajectory_assignment.output.assignments,
        # in the script only the numbers for frames need to be changed.
        script="molgri/scripts/vmd_show_eigenvectors_ar"
    output:
        vmdlog=f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/{{grid_identifier}}/{{tau}}/eigenvectors_vmdlog",
        fig_tga = expand(f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/{{grid_identifier}}/{{tau}}/eigenvector{{i}}.tga", i=[0, 1, 2, 3, 4], allow_missing=True),
        fig_png= report(expand(f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/{{grid_identifier}}/{{tau}}/eigenvector{{i}}.png",i=[0, 1, 2, 3, 4], allow_missing=True),
        category="{unique_id}")
    params:
        num_extremes=config["params_msm"]["num_extremes_to_plot"],
        num_eigenvec=config["params_msm"]["num_eigenvec_to_plot"]
    run:
        from molgri.plotting.create_vmdlog import VMDCreator
        eigenvectors = np.load(input.eigenvectors)
        assignments = np.load(input.assignments)

        vmdcreator = VMDCreator(EXPERIMENT_TYPE, "bynum 1:3", "bynum 4:6", assignments)
        vmdcreator.prepare_eigenvector_script(eigenvectors, output.fig_tga, index_list=None,
            n_eigenvectors=params.num_eigenvec, num_extremes=params.num_extremes, num_of_examples=1)
        shell("vmd -dispdev text {input.structure} {input.trajectory} < {output.vmdlog}")
        for el_tga, el_png in zip(output.fig_tga, output.fig_png):
            shell("convert {el_tga} {el_png}")


rule print_its:
    input:
        eigenvalues = rules.run_decomposition_msm.output.eigenvalues,
        runfile= f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/mdrun.mdp"
    output:
        data = f"{PATH_EXPERIMENTS}{{experiment_type}}/{{unique_id}}/{{grid_identifier}}/{{tau}}/its.csv"
    run:
        import pandas as pd

        try:
            writeout = int(read_from_mdrun(input.runfile,"nstxout-compressed"))
        except TypeError:
            writeout = int(read_from_mdrun(input.runfile,"nstxout"))
        timesteps = float(read_from_mdrun(input.runfile,"dt"))

        all_its = []
        eigenvals = np.load(input.eigenvalues)[1:]  # dropping the first one as it should be zero and cause issues
        all_its.append(-1*  np.array(int(wildcards.tau) * writeout * timesteps / np.log(np.abs(eigenvals))))
        my_df = pd.DataFrame(all_its, columns=[f"ITS {i} [ps]" for i in range(1, len(all_its[0])+1)])
        my_df.to_csv(output.data)
