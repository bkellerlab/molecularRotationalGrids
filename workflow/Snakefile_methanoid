# add molgri directory
import sys
sys.path.append(".")
import numpy as np


from molgri.paths import PATH_OUTPUT_AUTOSAVE, PATH_INPUT_BASEGRO, PATH_EXPERIMENTS

# "experiments/one_sqra/bigger_ideal/size_chart.png"
rule all:
    input:
        vmd = expand(f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/eigenvectors_{{sigma}}_{{which}}_vmdlog_sqra", unique_id="TFA_MET",
        grid_identifier="TFA_MET_grid1", lower_lim="None", upper_lim=100, sigma="0", which="SR"),
        plots = expand(f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/its_{{sigma}}_{{which}}.png",unique_id="TFA_MET",
            grid_identifier="TFA_MET_grid1",lower_lim="None",upper_lim=100, sigma="0", which="SR"),

rule prepare_methanoid:
    """
    Here, everything is specific to a water-water system set up. Create a new folder in experiments/ and populate it 
    with correctly defined inputs for the gromacs run etc.
    """
    input:
        m1_xyz = f"{PATH_INPUT_BASEGRO}methanolid.xyz",
        m2_xyz= f"{PATH_INPUT_BASEGRO}tetrafluorophthalic_anhydride.xyz",
    output:
        molecule1 = f"{PATH_EXPERIMENTS}{{unique_id}}/m1.xyz",
        molecule2 = f"{PATH_EXPERIMENTS}{{unique_id}}/m2.xyz",
    run:
        import shutil
        # stuff that can be copied without being modified
        shutil.copy(input.m1_xyz,output.molecule1)
        shutil.copy(input.m2_xyz,output.molecule2)

rule run_pt:
    """
    This rule should produce the .gro and .xtc files of the pseudotrajectory.
    """
    input:
        molecule1 = f"{PATH_EXPERIMENTS}{{unique_id}}/m1.xyz",
        molecule2 = f"{PATH_EXPERIMENTS}{{unique_id}}/m2.xyz",
        grid = f"{PATH_OUTPUT_AUTOSAVE}{{grid_identifier}}_full_array.npy",
    output:
        structure = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/structure.xyz",
        trajectory_dict = directory(f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/trajectory")
    params:
        cell_size_A = 30  # cubic box will be the output, this is size of the box in one dimension
    run:
        from molgri.io import PtWriter

        my_writer = PtWriter(input.molecule1, input.molecule2, cell_size_A=params.cell_size_A)
        my_writer.write_full_pt_in_directory(input.grid, path_output_pt=output.trajectory_dict + ".xyz",
            path_output_structure=output.structure)


rule run_sqra:
    """
    As input we need: energies, adjacency, volume, borders, distances.
    As output we want to have the rate matrix.
    """
    input:
        energy = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/energies.txt",
        distances_array = f"{PATH_OUTPUT_AUTOSAVE}{{grid_identifier}}_distances_array.npz",
        borders_array = f"{PATH_OUTPUT_AUTOSAVE}{{grid_identifier}}_borders_array.npz",
        volumes = f"{PATH_OUTPUT_AUTOSAVE}{{grid_identifier}}_volumes.npy",
    output:
        rate_matrix = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/rate_matrix.npz",
        index_list = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/index_list.npy",
    params:
        D=1,# diffusion constant in Angstrom^2/ps
        T=273,# temperature in K
        energy_type="Potential",
        m_h2o = 3e-26 #kg
    run:
        from molgri.molecules.parsers import XVGParser
        from molgri.molecules.transitions import SQRA
        from scipy import sparse
        from scipy.constants import k as k_B

        tau = 0.001 # kindof random value

        D = k_B * params.T * float(tau) * 1e-12 / params.m_h2o *1e8 # units should be A^2/ps
        print(f"Diffusion const D={D}")


        # load input files
        all_volumes = np.load(input.volumes)
        all_surfaces = sparse.load_npz(input.borders_array)
        all_distances = sparse.load_npz(input.distances_array)

        # determine limits
        if wildcards.lower_lim == "None":
            lower_limit = None
        else:
            lower_limit = float(wildcards.lower_lim)
        if wildcards.upper_lim == "None":
            upper_limit = None
        else:
            upper_limit = float(wildcards.upper_lim)

        with open(input.energy) as f:
            lines = f.readlines()

        energies = []  # in kJ/mol
        for line in lines:
            energies.append(float(line.split(",")[1]))
        energies = np.array(energies)

        sqra = SQRA(energies=energies,volumes=all_volumes,distances=all_distances,surfaces=all_surfaces)
        rate_matrix = sqra.get_rate_matrix(D,params.T)
        rate_matrix, index_list = sqra.cut_and_merge(rate_matrix,T=params.T,lower_limit=lower_limit,
            upper_limit=upper_limit)

        print(np.max(rate_matrix.data), np.min(rate_matrix.data), np.average(rate_matrix.data), np.std(rate_matrix.data))

        # saving to file
        sparse.save_npz(output.rate_matrix,rate_matrix)
        np.save(output.index_list,np.array(index_list,dtype=object))

rule run_decomposition:
    """
    As output we want to have eigenvalues, eigenvectors. Es input we get a (sparse) rate matrix.
    """
    input:
        rate_matrix = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/rate_matrix.npz",
    output:
        eigenvalues = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/eigenvalues_{{sigma}}_{{which}}.npy",
        eigenvectors = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/eigenvectors_{{sigma}}_{{which}}.npy",
    params:
        tol=1e-8,
        maxiter=100000,
    run:
        from scipy import sparse
        from molgri.molecules.transitions import DecompositionTool

        # loading
        my_matrix = sparse.load_npz(input.rate_matrix)

        if wildcards.sigma == "None":
            sigma = None
        else:
            sigma = float(wildcards.sigma)
        # calculation
        dt = DecompositionTool(my_matrix)
        all_eigenval, all_eigenvec = dt.get_decomposition(tol=params.tol, maxiter=params.maxiter, which=wildcards.which,
            sigma=sigma, k=10)

        # saving to file
        np.save(output.eigenvalues,np.array(all_eigenval))
        np.save(output.eigenvectors,np.array(all_eigenvec))


rule run_plot_everything_sqra:
    """
    Make a plot of eigenvalues
    """
    input:
        eigenvalues = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/eigenvalues_{{sigma}}_{{which}}.npy",
        eigenvectors = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/eigenvectors_{{sigma}}_{{which}}.npy",
    output:
        plot_eigenvectors=f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/eigenvectors_{{sigma}}_{{which}}.png",
        plot_eigenvalues=f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/eigenvalues_{{sigma}}_{{which}}.png",
        plot_its=report(f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/its_{{sigma}}_{{which}}.png"),
    run:
        from molgri.plotting.transition_plots import PlotlyTransitions

        pt = PlotlyTransitions(is_msm=False,path_eigenvalues=input.eigenvalues,path_eigenvectors=input.eigenvectors)
        # eigenvectors
        pt.plot_eigenvectors_flat()
        pt.save_to(output.plot_eigenvectors,height=1200)
        # eigenvalues
        pt.plot_eigenvalues()
        pt.save_to(output.plot_eigenvalues)
        # # its for msm
        pt.plot_its_as_line()
        pt.save_to(output.plot_its)
        # we could also plot the heatmap of the matrix, but it's honestly not that useful and can become very large

rule compile_vmd_log:
    """
    Input are the saved eigenvectors. Output = a vmd log that can be used later with:

    vmd <gro file> <xtc file>
    play <vmdlog file>
    """
    input:
        eigenvectors = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/eigenvectors_{{sigma}}_{{which}}.npy",
        index_list = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/index_list.npy",
        # in the script only the numbers for frames need to be changed.
        script="molgri/scripts/vmd_show_eigenvectors_methanoid"
    output:
        vmdlog = f"{PATH_EXPERIMENTS}{{unique_id}}/{{grid_identifier}}/{{lower_lim}}-{{upper_lim}}/eigenvectors_{{sigma}}_{{which}}_vmdlog_sqra"
    params:
        num_extremes=3,
        num_eigenvec=6  # only show the first num_eigenvec
    run:
        from molgri.plotting.create_vmdlog import show_eigenvectors

        # load eigenvectors
        eigenvectors = np.load(input.eigenvectors)
        index_list = np.load(input.index_list,allow_pickle=True)
        if not np.any(index_list):
            index_list = None
        else:
            index_list = list(index_list)
        show_eigenvectors(input.script,output.vmdlog,eigenvector_array=eigenvectors,num_eigenvec=params.num_eigenvec,num_extremes=params.num_extremes,index_list=index_list)



include: "Snakefile_grids"

