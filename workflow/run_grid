"""
All workflow (anything to do with input/output files, creating figures etc. that only has to do with grids.
"""

import numpy as np

# add molgri directory
import sys
import yaml
from scipy import sparse


sys.path.append(".")
from molgri.space.fullgrid import FullGrid


PATH_EXPERIMENTS = "ex_exp/"
PATH_GRIDS = f"{PATH_EXPERIMENTS}grids/"
GRID_ID = config["grid_identifier"]

rule all_grids:
    input:
        f"{PATH_GRIDS}{GRID_ID}/full_array.npy",
    log:
        logfile = f"{PATH_GRIDS}{GRID_ID}/record_config.yaml",
    run:
        with open(log.logfile,"w") as f:
            yaml.dump(config,f)

rule run_grid:
    """
    This rule should provide a full grid and its geometric parameters.
    """
    output:
        full_array = f"{PATH_GRIDS}{{grid_identifier}}/full_array.npy",
        adjacency_array = f"{PATH_GRIDS}{{grid_identifier}}/adjacency_array.npz",
        distances_array = f"{PATH_GRIDS}{{grid_identifier}}/distances_array.npz",
        borders_array= f"{PATH_GRIDS}{{grid_identifier}}/borders_array.npz",
        volumes = f"{PATH_GRIDS}{{grid_identifier}}/volumes.npy",
    params:
        n_points_orientations = str(config["params_grid"]["num_orientations"]),
        n_points_directions = str(config["params_grid"]["num_directions"]),
        radial_distances_nm = config["params_grid"]["radial_distances_nm"],
        factor_orientation_to_position=float(config["params_grid"]["factor_orientation_to_position"]),
        position_grid_cartesian = bool(config["params_grid"]["position_grid_is_cartesian"])
    benchmark:
        f"{PATH_GRIDS}{{grid_identifier}}/grid_benchmark.txt"
    run:
        # create a grid
        fg = FullGrid(params.n_points_orientations, params.n_points_directions,
            params.radial_distances_nm, factor=params.factor_orientation_to_position,
            position_grid_cartesian=params.position_grid_cartesian)
        # save full array
        np.save(output.full_array, fg.get_full_grid_as_array())
        # save geometric properties
        sparse.save_npz(output.adjacency_array, fg.get_full_adjacency())
        sparse.save_npz(output.borders_array,fg.get_full_borders())
        sparse.save_npz(output.distances_array,fg.get_full_distances())
        np.save(output.volumes,fg.get_total_volumes())
