"""
These plots are useful for presentations.
"""
import numpy as np
from scipy.constants import pi
import seaborn as sns
from scipy.spatial import geometric_slerp, Voronoi, voronoi_plot_2d

from molgri.plotting.abstract import RepresentationCollection
from molgri.wrappers import plot3D_method, plot_method
from molgri.space.utils import normalise_vectors, random_sphere_points


class CurvedPlot(RepresentationCollection):

    def __init__(self, data_name="curved_plot"):
        super().__init__(data_name=data_name, default_complexity_level="empty")

    @plot_method
    def plot_curve_vs_line(self):

        alpha = np.linspace(0, 2*pi, 8)
        xs, ys = np.cos(alpha), np.sin(alpha)
        # points
        self.ax.scatter(xs, ys, color="black")
        # straight line
        # self.ax.plot(xs[:2], ys[:2], color="red", label="Euclidean")
        # # curved line
        # t_vals = np.linspace(0, 1, 2000)
        # start = np.array([xs[0], ys[0]])
        # end = np.array([xs[1], ys[1]])
        # norm = np.linalg.norm(start)
        # result = geometric_slerp(normalise_vectors(start), normalise_vectors(end), t_vals)
        #
        # points = [[x, y] for x, y in zip(xs, ys)]
        # my_voronoi = Voronoi(points)
        # voronoi_plot_2d(my_voronoi, ax=self.ax)
        #self.ax.plot(norm * result[..., 0], norm * result[..., 1], c="blue", label="cosine")
        #self.ax.legend(loc="upper left")
        self._set_axis_limits()
        self._equalize_axes()

class ExamplePotential(RepresentationCollection):

    def __init__(self, data_name="example_potential"):
        super().__init__(data_name=data_name, default_complexity_level="empty")
        self.path = None

    def _my_func(self, x, y):
        return -(-(np.sin(np.pi*x)*np.sin(np.pi*y)  -0.1*(0.7*x**2 -0.3*y**2 +3*x - 2*y) + 0.07*(-0.1*x**2
                                                                                               +1*y**2+0.7*x +
                                                                                               1.1*y-2)) - 2*np.cos(
            np.pi*y)**2)

    def _my_dx(self, x, y):
        return -(0.251 + 0.154*x - np.pi*np.cos(np.pi*x)*np.sin(np.pi*y))

    def _my_dy(self, x, y):
        return -(-0.277 - 0.2*y + np.cos(np.pi*y)*(-np.pi*np.sin(np.pi*x) + 12.5664*np.sin(np.pi*y)))

    @plot_method
    def plot_random_2D(self):
        np.random.seed = 1
        npts = 200
        xs = [-1.4764368564942933, -1.4263967389954222, -0.4438033170286211, -1.7813426338835248, -1.7611218569953762, 0.3686349427441571, -1.8167883278787111, -1.8147917027492482, -0.9521680295978454, 0.37386071000313326, -1.9780312934513749, 0.17296892447453205, 0.547283196264241, -0.9134853948428749, -0.5940386558070108, 0.04152207394043783, 0.7542727023848954, 0.5985404929763884, 1.4625653982472797, -0.9155612090704794, -1.0918186568067343, 1.454564820059237, 0.9152950056659757, 0.02075365933026374, -0.5158100453004124, 1.618323117995946, -1.3160436800208153, -0.5086188685540245, 0.4418870314963321, 1.8849761719121303, -1.8587257104878345, -1.24244845293835, 1.3984500131335467, 1.426410832366166, -1.822345743875697, 0.4724577239608836, -0.14052235081310016, 1.2665968647859511, -0.9082140506060026, 1.4893532109139573, 1.236601444886488, -0.4867880915167744, -0.6271978826343463, -1.18114324573766, 1.2813730402994428, 0.9182802044087617, -0.01942697865943588, -1.7072607271219922, 0.15179057274790386, 0.1547396408901407, -1.8972548231977466, 0.5049875142467442, -1.63271129533622, 0.9485012364442413, -1.6563807612122217, -1.983729026656739, 0.8269768075189381, 0.4852158376858866, 1.8353801401516603, -1.0845051624664337, 0.7550528597796085, -1.3420813693950384, 0.3781673458932744, -1.2831623223744306, 0.25378944241289014, 1.917517147568085, 1.1308234102257582, 0.41801110011508635, 0.8611714252352689, -0.0012912770513082705, -1.9896660456848556, 1.4041323940397632, 0.31931529691997396, 1.0751789266947482, -0.9323305718167769, 0.9749318229491251, 0.5079663056642585, -1.7038264742283151, -1.784396307089791, 1.527021535787132, -0.6474384330231344, 0.6885233016327956, -0.3715804191381782, -0.6368472773829459, -0.43663342476815536, -1.9185314707673315, 1.0690388029647697, -0.9934675881346378, 1.6147033923781091, 1.5954331043981074, -0.001732773665377163, -0.5948613280119597, 0.44402359907702005, -0.7424107834152638, -0.892084080493079, 1.3507326498449381, -1.3667526277038098, -0.763515960935234, 1.9693055052605266, 0.3928137749380922, -1.8868369800373355, -1.2179438606415296, 1.1979755900261235, -1.4587946974934982, 1.5299123335795328, 0.2712874957150744, 1.310175076877023, -1.0913571455947442, 1.1126916235532267, -1.6190011229628634, 0.17262284733507371, -1.946287703490511, -0.07379315386776497, -0.8196746186216308, 1.8274088889873639, 1.5330515905458264, 1.8277320611941739, 1.1941965730965256, -1.2508393267383715, -1.1934702059250237, -0.8643375947419307, 0.8557961213117617, -0.0313357145760631, -0.740284922193525, -1.3453150152777247, -1.0332112470525558, 0.5048307501484461, -1.5331579775265132, 0.09233294501292333, -1.034522161505051, 1.9220822570167133, 0.3042747138873487, 1.113739949665578, -1.685070636521969, 1.0396100850413297, -0.39959374740766496, 1.462390320793451, -1.0245589486119684, -0.07698216979098671, 0.9408685551885103, -0.8517790710278335, 1.0954962141155087, 0.8314640560384312, -1.9407109002633667, -1.7333710696420894, 0.8251419968233193, 1.4163420722776738, 1.4661010205717053, -0.4585236086357347, -1.589207267464528, 0.12069555640597329, 1.553573554087007, 1.048495869538296, 1.4805961545571789, -1.348667934640102, -1.2370557037748093, -0.42092937410656317, -1.259414686117851, 1.403206012887333, 0.8186453042373492, 0.037182445601920744, -0.930985724320271, -0.9224595981447448, 0.9431850834893623, 1.2787294273687242, 1.5442575785206496, 1.6407264860343713, 1.4589510533573407, -0.11863186504732948, -0.05761284472564654, -0.4617868902786486, 1.2412923932468214, -1.4507433659509257, -0.7228160857430419, 0.5887739133883461, 1.6273879997125107, 1.9224683448420659, 1.022980684448732, 1.2957221332089817, -1.6198407150960414, 1.849586683693559, -0.3055513792636684, -0.38999873839977095, 1.8654894884509585, 0.6699973102658108, 1.866159721809154, 1.011629369976157, 0.3739058139477005, 1.0883975093771472, -0.7138185883777552, 0.28185318076917465, 0.6639714789705673, -0.6274304265444961, 0.2820229046239455, 0.47852839351060705, -1.2239153318738007, -1.8375189563759462, 1.3639429973488792, 1.839564268395145, -0.9275699072289099]
        ys = [-1.4977051859941972, -0.4317217114998768, -1.012314979008765, 0.6747370340211103, 1.1399080127321164, -1.8738706562884277, 0.035913352312982205, 0.4200745905404313, -1.4605910272119438, 0.5472285650591693, 1.5328182526220533, -1.0637057831919972, -0.8446486840842011, 0.5346782864905344, -0.5122232711793178, 1.9436431369759095, 1.9181149923500285, 1.3345935833732923, -1.5904025818441476, 0.40647254710463177, 1.7500184409419992, 0.22936302819629617, 0.43798316289184136, 0.8580461443353666, 0.04252019505085425, 0.7030243277183845, 1.1989727973590418, -1.0205370296316407, -0.9475249418431106, 0.40350230025212674, -0.44627915351503233, 0.0902122433222754, -0.1882745834648385, 0.21960587108798313, -0.5071350448754504, 0.45571402693369745, 0.38862382203175283, -0.6832531700186069, 0.8816390131401923, -0.16073622590294745, 0.540634097935639, -0.08317003352229557, -0.4570264370265664, 1.3169037922502462, 1.1939281422369414, 1.8007901868320477, -0.14081490436534105, 0.3372261693786158, 0.42872534117140715, 0.19113616097969066, 0.9943712963685067, 1.320635038215039, 0.9245041216031167, -1.8149170403993682, -1.5637820140561471, 0.6315922880586853, -0.7033035258648144, -0.053428055145375186, -1.026835143588734, 1.2921116037363949, 1.1999356345583716, 1.6943385638754282, 1.2170006258050279, -0.9136739154297979, 0.1555534269857164, -0.36985449005935944, -1.5383438403720961, -0.8494832422018734, 0.1838947355076863, -1.8107963120609178, -1.2798191769095553, -1.9399905853886348, -1.5794075493149973, 1.964159737554282, -0.3554087113878417, 0.2887250857864121, -0.7218327716111808, 0.018347562319923405, -1.3116360124107662, 0.029914373115450754, 0.5158833637338995, -1.4615260367229626, -1.3286238427941548, 0.11705531680074399, -1.4984404528462432, -0.5698739902700347, -0.8008583664697015, -0.7398546210088277, 0.13479164918809072, -1.5638586787947482, -0.6985613487662476, -1.3709278745224864, 0.73961962504133, 1.3883845309137905, -1.3618601420955354, -0.34097899517446884, -0.7808573629341833, 1.8448631156863655, 1.2950060878896883, 0.3869694503044565, 0.041514273928490386, -0.49789526567301623, 0.048631185842041624, 0.4959821404492577, 1.9116640309940278, -1.7744503738742456, -1.7033290239494612, -0.975637359896437, -0.7070899504737209, -0.08687093442001004, -0.025037429323986338, -1.2814061658489613, -1.3041389838599358, 1.4661595669515948, -1.4665012829397877, -0.9034400220284988, -0.5950122996114282, 0.18779494729099522, -1.0660857144704212, 1.4726178259271103, -0.7632200481052518, -1.1521960884220959, -0.7222447739869025, 0.7280795175215067, 0.6441794263164882, 1.3463558846007597, -0.13206303591103685, 1.3355570880953085, 1.638928115284239, 0.7891662931214887, -0.9985325879559404, -1.403338731382549, 0.3284954786560297, -1.1542126147446643, 1.2610428406713399, -0.9229481384274552, -1.2679510171422481, 0.9424518992775957, 0.7751370294075866, -1.6668315693562659, 1.897565512711246, 0.4516747420693137, 0.12617397938013353, -1.8683914105082007, 0.4136681384294385, -1.9944769204637405, 0.27960000481211855, 1.3767522801825613, -1.9872086014923003, 0.04202238206675313, -0.07432199700632047, -1.7627895696394864, -1.9113573262145969, -0.5754456271377775, -1.3022834553125797, -1.407215016204646, 1.133372872003961, 0.6049927161377919, -1.6113331935122668, -1.0280486618112454, 0.6516350940396154, -0.2171961555532027, 0.021395387820920764, 0.5271485014188646, -0.07420668777418182, 1.6386564471800593, 1.3974280599789561, 0.3970534742534064, -1.8258460934628529, -1.0461678362471543, 1.7542390255336553, -1.593456341244571, -1.5823817794768162, -0.6701370090839025, -1.5053673509416874, 1.529986171482828, -1.234597582754616, 1.0323499279983115, 0.7163356487914379, -1.554769067840049, 0.4536062989647278, -0.19606020822676218, -0.6457494088219118, -1.891483432961926, 0.9305637933849646, 1.6365667881567685, 0.34048947222347836, 1.0560967569431035, -0.9227107347462629, -1.0127586757422549, 1.6279760771095408, 1.968956815767641, -1.2341254597376383, -1.7851732807289227, -0.5896388125428578, 1.2594429888138978, -1.9063532642087129, 0.19907507344811393, 0.8710005123023512, -1.3740298722621036]
        xs=np.array(xs)
        ys=np.array(ys)
        zs = self._my_func(xs, ys)
        self.ax.tricontour(xs, ys, zs, 10, linestyles="solid", levels=9, colors='k', linewidths=1)
        self.ax.tricontourf(xs, ys, zs, levels=9, cmap="RdBu_r")
        self._equalize_axes()
        self._set_axis_limits((-1.6, 1.6, -1.6, 1.6))

    def _get_path(self, x_start=-1, y_start=0.7, num_points=50000, T=20):
        if self.path is None:
            np.random.seed = 5
            xs = [x_start]
            ys = [y_start]
            dx = 0.01
            dy = 0.01
            for i in range(num_points):
                xs.append(xs[-1] + dx * (-self._my_dx(xs[-1], ys[-1])) + T / 1000 * np.random.uniform(-1, 1))
                ys.append(ys[-1] + dy * (-self._my_dy(xs[-1], ys[-1])) + T / 1000 * np.random.uniform(-1, 1))
            self.path = (xs, ys)
        return self.path

    @plot_method
    def plot_dots(self, color=None):
        np.random.seed = 1
        npts = 10
        xs = np.linspace(-1.6, 1.6, npts)
        ys = np.linspace(-1.6, 1.6, npts)
        X, Y = np.meshgrid(xs, ys)
        zs = self._my_func(X, Y)
        if color:
            self.ax.scatter(X, Y, color=color, s=15)
        else:
            self.ax.scatter(X, Y, c=zs, cmap="RdBu_r", s=15)
        self._set_axis_limits((-1.65, 1.65, -1.65, 1.65))

    @plot_method
    def plot_point(self, xs, ys, marker="X", color="black", s=5):
        self.ax.scatter(xs, ys, marker=marker, color=color, s=s)
        self._equalize_axes()
        self._set_axis_limits((-1.6, 1.6, -1.6, 1.6))

    @plot_method
    def plot_path(self, **kwargs):
        xs, ys = self._get_path(**kwargs)
        #self.ax.scatter(xs, ys, marker="x", color="black")
        self.ax.plot(xs, ys, color="black")
        self._set_axis_limits((-1.6, 1.6, -1.6, 1.6))
        return xs, ys

    @plot_method
    def plot_probability_dist_ideal(self):
        xs = [-1.4764368564942933, -1.4263967389954222, -0.4438033170286211, -1.7813426338835248, -1.7611218569953762, 0.3686349427441571, -1.8167883278787111, -1.8147917027492482, -0.9521680295978454, 0.37386071000313326, -1.9780312934513749, 0.17296892447453205, 0.547283196264241, -0.9134853948428749, -0.5940386558070108, 0.04152207394043783, 0.7542727023848954, 0.5985404929763884, 1.4625653982472797, -0.9155612090704794, -1.0918186568067343, 1.454564820059237, 0.9152950056659757, 0.02075365933026374, -0.5158100453004124, 1.618323117995946, -1.3160436800208153, -0.5086188685540245, 0.4418870314963321, 1.8849761719121303, -1.8587257104878345, -1.24244845293835, 1.3984500131335467, 1.426410832366166, -1.822345743875697, 0.4724577239608836, -0.14052235081310016, 1.2665968647859511, -0.9082140506060026, 1.4893532109139573, 1.236601444886488, -0.4867880915167744, -0.6271978826343463, -1.18114324573766, 1.2813730402994428, 0.9182802044087617, -0.01942697865943588, -1.7072607271219922, 0.15179057274790386, 0.1547396408901407, -1.8972548231977466, 0.5049875142467442, -1.63271129533622, 0.9485012364442413, -1.6563807612122217, -1.983729026656739, 0.8269768075189381, 0.4852158376858866, 1.8353801401516603, -1.0845051624664337, 0.7550528597796085, -1.3420813693950384, 0.3781673458932744, -1.2831623223744306, 0.25378944241289014, 1.917517147568085, 1.1308234102257582, 0.41801110011508635, 0.8611714252352689, -0.0012912770513082705, -1.9896660456848556, 1.4041323940397632, 0.31931529691997396, 1.0751789266947482, -0.9323305718167769, 0.9749318229491251, 0.5079663056642585, -1.7038264742283151, -1.784396307089791, 1.527021535787132, -0.6474384330231344, 0.6885233016327956, -0.3715804191381782, -0.6368472773829459, -0.43663342476815536, -1.9185314707673315, 1.0690388029647697, -0.9934675881346378, 1.6147033923781091, 1.5954331043981074, -0.001732773665377163, -0.5948613280119597, 0.44402359907702005, -0.7424107834152638, -0.892084080493079, 1.3507326498449381, -1.3667526277038098, -0.763515960935234, 1.9693055052605266, 0.3928137749380922, -1.8868369800373355, -1.2179438606415296, 1.1979755900261235, -1.4587946974934982, 1.5299123335795328, 0.2712874957150744, 1.310175076877023, -1.0913571455947442, 1.1126916235532267, -1.6190011229628634, 0.17262284733507371, -1.946287703490511, -0.07379315386776497, -0.8196746186216308, 1.8274088889873639, 1.5330515905458264, 1.8277320611941739, 1.1941965730965256, -1.2508393267383715, -1.1934702059250237, -0.8643375947419307, 0.8557961213117617, -0.0313357145760631, -0.740284922193525, -1.3453150152777247, -1.0332112470525558, 0.5048307501484461, -1.5331579775265132, 0.09233294501292333, -1.034522161505051, 1.9220822570167133, 0.3042747138873487, 1.113739949665578, -1.685070636521969, 1.0396100850413297, -0.39959374740766496, 1.462390320793451, -1.0245589486119684, -0.07698216979098671, 0.9408685551885103, -0.8517790710278335, 1.0954962141155087, 0.8314640560384312, -1.9407109002633667, -1.7333710696420894, 0.8251419968233193, 1.4163420722776738, 1.4661010205717053, -0.4585236086357347, -1.589207267464528, 0.12069555640597329, 1.553573554087007, 1.048495869538296, 1.4805961545571789, -1.348667934640102, -1.2370557037748093, -0.42092937410656317, -1.259414686117851, 1.403206012887333, 0.8186453042373492, 0.037182445601920744, -0.930985724320271, -0.9224595981447448, 0.9431850834893623, 1.2787294273687242, 1.5442575785206496, 1.6407264860343713, 1.4589510533573407, -0.11863186504732948, -0.05761284472564654, -0.4617868902786486, 1.2412923932468214, -1.4507433659509257, -0.7228160857430419, 0.5887739133883461, 1.6273879997125107, 1.9224683448420659, 1.022980684448732, 1.2957221332089817, -1.6198407150960414, 1.849586683693559, -0.3055513792636684, -0.38999873839977095, 1.8654894884509585, 0.6699973102658108, 1.866159721809154, 1.011629369976157, 0.3739058139477005, 1.0883975093771472, -0.7138185883777552, 0.28185318076917465, 0.6639714789705673, -0.6274304265444961, 0.2820229046239455, 0.47852839351060705, -1.2239153318738007, -1.8375189563759462, 1.3639429973488792, 1.839564268395145, -0.9275699072289099]
        ys = [-1.4977051859941972, -0.4317217114998768, -1.012314979008765, 0.6747370340211103, 1.1399080127321164, -1.8738706562884277, 0.035913352312982205, 0.4200745905404313, -1.4605910272119438, 0.5472285650591693, 1.5328182526220533, -1.0637057831919972, -0.8446486840842011, 0.5346782864905344, -0.5122232711793178, 1.9436431369759095, 1.9181149923500285, 1.3345935833732923, -1.5904025818441476, 0.40647254710463177, 1.7500184409419992, 0.22936302819629617, 0.43798316289184136, 0.8580461443353666, 0.04252019505085425, 0.7030243277183845, 1.1989727973590418, -1.0205370296316407, -0.9475249418431106, 0.40350230025212674, -0.44627915351503233, 0.0902122433222754, -0.1882745834648385, 0.21960587108798313, -0.5071350448754504, 0.45571402693369745, 0.38862382203175283, -0.6832531700186069, 0.8816390131401923, -0.16073622590294745, 0.540634097935639, -0.08317003352229557, -0.4570264370265664, 1.3169037922502462, 1.1939281422369414, 1.8007901868320477, -0.14081490436534105, 0.3372261693786158, 0.42872534117140715, 0.19113616097969066, 0.9943712963685067, 1.320635038215039, 0.9245041216031167, -1.8149170403993682, -1.5637820140561471, 0.6315922880586853, -0.7033035258648144, -0.053428055145375186, -1.026835143588734, 1.2921116037363949, 1.1999356345583716, 1.6943385638754282, 1.2170006258050279, -0.9136739154297979, 0.1555534269857164, -0.36985449005935944, -1.5383438403720961, -0.8494832422018734, 0.1838947355076863, -1.8107963120609178, -1.2798191769095553, -1.9399905853886348, -1.5794075493149973, 1.964159737554282, -0.3554087113878417, 0.2887250857864121, -0.7218327716111808, 0.018347562319923405, -1.3116360124107662, 0.029914373115450754, 0.5158833637338995, -1.4615260367229626, -1.3286238427941548, 0.11705531680074399, -1.4984404528462432, -0.5698739902700347, -0.8008583664697015, -0.7398546210088277, 0.13479164918809072, -1.5638586787947482, -0.6985613487662476, -1.3709278745224864, 0.73961962504133, 1.3883845309137905, -1.3618601420955354, -0.34097899517446884, -0.7808573629341833, 1.8448631156863655, 1.2950060878896883, 0.3869694503044565, 0.041514273928490386, -0.49789526567301623, 0.048631185842041624, 0.4959821404492577, 1.9116640309940278, -1.7744503738742456, -1.7033290239494612, -0.975637359896437, -0.7070899504737209, -0.08687093442001004, -0.025037429323986338, -1.2814061658489613, -1.3041389838599358, 1.4661595669515948, -1.4665012829397877, -0.9034400220284988, -0.5950122996114282, 0.18779494729099522, -1.0660857144704212, 1.4726178259271103, -0.7632200481052518, -1.1521960884220959, -0.7222447739869025, 0.7280795175215067, 0.6441794263164882, 1.3463558846007597, -0.13206303591103685, 1.3355570880953085, 1.638928115284239, 0.7891662931214887, -0.9985325879559404, -1.403338731382549, 0.3284954786560297, -1.1542126147446643, 1.2610428406713399, -0.9229481384274552, -1.2679510171422481, 0.9424518992775957, 0.7751370294075866, -1.6668315693562659, 1.897565512711246, 0.4516747420693137, 0.12617397938013353, -1.8683914105082007, 0.4136681384294385, -1.9944769204637405, 0.27960000481211855, 1.3767522801825613, -1.9872086014923003, 0.04202238206675313, -0.07432199700632047, -1.7627895696394864, -1.9113573262145969, -0.5754456271377775, -1.3022834553125797, -1.407215016204646, 1.133372872003961, 0.6049927161377919, -1.6113331935122668, -1.0280486618112454, 0.6516350940396154, -0.2171961555532027, 0.021395387820920764, 0.5271485014188646, -0.07420668777418182, 1.6386564471800593, 1.3974280599789561, 0.3970534742534064, -1.8258460934628529, -1.0461678362471543, 1.7542390255336553, -1.593456341244571, -1.5823817794768162, -0.6701370090839025, -1.5053673509416874, 1.529986171482828, -1.234597582754616, 1.0323499279983115, 0.7163356487914379, -1.554769067840049, 0.4536062989647278, -0.19606020822676218, -0.6457494088219118, -1.891483432961926, 0.9305637933849646, 1.6365667881567685, 0.34048947222347836, 1.0560967569431035, -0.9227107347462629, -1.0127586757422549, 1.6279760771095408, 1.968956815767641, -1.2341254597376383, -1.7851732807289227, -0.5896388125428578, 1.2594429888138978, -1.9063532642087129, 0.19907507344811393, 0.8710005123023512, -1.3740298722621036]
        xs=np.array(xs)
        ys=np.array(ys)
        zs = np.exp(-self._my_func(xs, ys))

        self.ax.tricontour(xs, ys, zs, 10, linestyles="solid", levels=9, colors='k', linewidths=1)
        self.ax.tricontourf(xs, ys, zs, levels=9, cmap="Blues", vmin=0, vmax=10)
        self._equalize_axes()
        self._set_axis_limits((-1.6, 1.6, -1.6, 1.6))

    @plot_method
    def plot_probability_dist_sim(self, **kwargs):
        xs, ys = self._get_path(**kwargs)
        xs = np.array(xs)
        xs_copy = np.copy(xs)
        ys = np.array(ys)
        xs = xs[xs<1.6]
        ys = ys[xs_copy<1.6]
        xs_copy = xs_copy[xs_copy < 1.6]
        xs = xs[xs > -1.6]
        ys = ys[xs_copy > -1.6]
        #zs = np.exp(-self._my_func(xs, ys))

        sns.histplot(x=xs, y=ys, ax=self.ax, bins=20)

        #self.ax.tricontour(xs, ys, zs, 10, linestyles="solid", levels=9, colors='k', linewidths=1)
        #self.ax.tricontourf(xs, ys, zs, levels=9, cmap="Blues", vmin=0, vmax=10)
        self._equalize_axes()
        self._set_axis_limits((-1.6, 1.6, -1.6, 1.6))





if __name__ == "__main__":
    import matplotlib.pyplot as plt
    sns.set_context("talk")
    cp = ExamplePotential("myplot")
    # simply the plot
    # cp.plot_random_2D(save=True)
    # #
    # # # plot with starting position
    # cp.plot_random_2D(save=False)
    # cp.plot_point(-1, 0.7, ax=cp.ax, fig=cp.fig)
    # #
    # # # grid
    # cp.plot_dots()
    # cp.plot_random_2D(save=False)
    # cp.plot_dots(color="black", ax=cp.ax, fig=cp.fig)
    # #
    # # #low T trajectory
    # # cp.plot_random_2D(save=False)
    # # cp.plot_point(-1, 0.7, ax=cp.ax, fig=cp.fig, save=False)
    # # cp.plot_path(-1, 0.7, ax=cp.ax, fig=cp.fig, T=100)
    # #
    # # # high T trajectory
    # cp.plot_random_2D(save=False)
    # cp.plot_point(-1, 0.7, ax=cp.ax, fig=cp.fig, save=False)
    # cp.plot_path(ax=cp.ax, fig=cp.fig, T=200)
    #
    # cp.plot_point(-1, 0.7, save=False)
    # cp.plot_path(ax=cp.ax, fig=cp.fig, T=200)
    #
    #
    # cp.plot_probability_dist_ideal()
    # cp.plot_probability_dist_sim(T=200)

    cp.plot_point(-1, 0.7, color="blue", marker="o", s=5, save=False)
    plt.show()